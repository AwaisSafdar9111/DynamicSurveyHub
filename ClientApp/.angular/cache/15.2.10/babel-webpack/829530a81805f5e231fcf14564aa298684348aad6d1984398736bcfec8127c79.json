{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConditionalLogicService {\n  http;\n  apiUrl = `${environment.apiUrl}/api/forms`;\n  conditionalLogicCache = new Map();\n  activeConditions = new BehaviorSubject({});\n  constructor(http) {\n    this.http = http;\n  }\n  /**\r\n   * Get all conditional logic rules for a form\r\n   * @param formId The ID of the form\r\n   */\n  getConditionalLogic(formId) {\n    // Check if we have it in cache first\n    if (this.conditionalLogicCache.has(formId)) {\n      return of(this.conditionalLogicCache.get(formId));\n    }\n    // Otherwise fetch from API\n    return this.http.get(`${this.apiUrl}/${formId}/conditional-logic`).pipe(tap(rules => this.conditionalLogicCache.set(formId, rules)), catchError(error => {\n      console.error('Error fetching conditional logic:', error);\n      return of([]);\n    }));\n  }\n  /**\r\n   * Get all conditional logic rules that have the given control as their source\r\n   * @param formId The ID of the form\r\n   * @param controlId The ID of the source control\r\n   */\n  getConditionalLogicForSourceControl(formId, controlId) {\n    return this.getConditionalLogic(formId).pipe(map(rules => rules.filter(rule => rule.source_control_id === controlId)));\n  }\n  /**\r\n   * Get active conditions subject as observable\r\n   */\n  getActiveConditions() {\n    return this.activeConditions.asObservable();\n  }\n  /**\r\n   * Evaluate a condition against a control value\r\n   * @param condition The condition to evaluate\r\n   * @param value The value of the control\r\n   */\n  evaluateCondition(condition, value) {\n    if (!condition || condition.operator === undefined) {\n      return true;\n    }\n    switch (condition.operator) {\n      case 'equals':\n        return value === condition.value;\n      case 'notEquals':\n        return value !== condition.value;\n      case 'contains':\n        return typeof value === 'string' && value.includes(condition.value);\n      case 'notContains':\n        return typeof value === 'string' && !value.includes(condition.value);\n      case 'in':\n        return Array.isArray(condition.value) && condition.value.includes(value);\n      case 'notIn':\n        return Array.isArray(condition.value) && !condition.value.includes(value);\n      case 'greaterThan':\n        return value > condition.value;\n      case 'lessThan':\n        return value < condition.value;\n      case 'empty':\n        return value === null || value === undefined || value === '';\n      case 'notEmpty':\n        return value !== null && value !== undefined && value !== '';\n      default:\n        console.warn(`Unknown operator: ${condition.operator}`);\n        return true;\n    }\n  }\n  /**\r\n   * Update the condition status for a target control\r\n   * @param targetControlId The ID of the target control\r\n   * @param isActive Whether the condition is active\r\n   */\n  updateConditionStatus(targetControlId, isActive) {\n    const currentConditions = this.activeConditions.value;\n    this.activeConditions.next({\n      ...currentConditions,\n      [targetControlId]: isActive\n    });\n  }\n  /**\r\n   * Evaluate conditions for a form based on control values\r\n   * @param formId The ID of the form\r\n   * @param controlValues An object mapping control IDs to their values\r\n   */\n  evaluateFormConditions(formId, controlValues) {\n    this.getConditionalLogic(formId).subscribe(rules => {\n      const activeConditions = {\n        ...this.activeConditions.value\n      };\n      rules.forEach(rule => {\n        const sourceValue = controlValues[rule.source_control_id];\n        const isConditionMet = this.evaluateCondition(rule.condition, sourceValue);\n        // For \"show\" action, we want the control to be visible when condition is met\n        // For \"hide\" action, we want the control to be visible when condition is NOT met\n        const isActive = rule.action === 'show' ? isConditionMet : !isConditionMet;\n        activeConditions[rule.target_control_id] = isActive;\n      });\n      this.activeConditions.next(activeConditions);\n    });\n  }\n  /**\r\n   * Clear the cached conditional logic for a form\r\n   * @param formId The ID of the form\r\n   */\n  clearCache(formId) {\n    if (formId) {\n      this.conditionalLogicCache.delete(formId);\n    } else {\n      this.conditionalLogicCache.clear();\n    }\n  }\n  static ɵfac = function ConditionalLogicService_Factory(t) {\n    return new (t || ConditionalLogicService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConditionalLogicService,\n    factory: ConditionalLogicService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}