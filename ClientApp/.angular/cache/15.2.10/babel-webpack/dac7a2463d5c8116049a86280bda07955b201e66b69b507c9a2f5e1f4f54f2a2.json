{"ast":null,"code":"import { Subject, takeUntil } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../shared/services/conditional-logic.service\";\nexport class ConditionalControlDirective {\n  el;\n  conditionalLogicService;\n  controlId;\n  destroy$ = new Subject();\n  constructor(el, conditionalLogicService) {\n    this.el = el;\n    this.conditionalLogicService = conditionalLogicService;\n  }\n  ngOnInit() {\n    if (!this.controlId) {\n      console.warn('No control ID provided to conditional control directive');\n      return;\n    }\n    // Subscribe to active conditions\n    this.conditionalLogicService.getActiveConditions().pipe(takeUntil(this.destroy$)).subscribe(conditions => {\n      // Check if this control has conditions\n      if (this.controlId in conditions) {\n        const isVisible = conditions[this.controlId];\n        // Apply visibility\n        if (isVisible) {\n          this.el.nativeElement.style.display = '';\n          // Enable form control if it exists\n          const formControl = this.el.nativeElement.querySelector('input, select, textarea');\n          if (formControl) {\n            formControl.disabled = false;\n          }\n        } else {\n          this.el.nativeElement.style.display = 'none';\n          // Disable form control if it exists to prevent it from being included in form submission\n          const formControl = this.el.nativeElement.querySelector('input, select, textarea');\n          if (formControl) {\n            formControl.disabled = true;\n          }\n        }\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  static ɵfac = function ConditionalControlDirective_Factory(t) {\n    return new (t || ConditionalControlDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.ConditionalLogicService));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ConditionalControlDirective,\n    selectors: [[\"\", \"appConditionalControl\", \"\"]],\n    inputs: {\n      controlId: \"controlId\"\n    },\n    standalone: true\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}