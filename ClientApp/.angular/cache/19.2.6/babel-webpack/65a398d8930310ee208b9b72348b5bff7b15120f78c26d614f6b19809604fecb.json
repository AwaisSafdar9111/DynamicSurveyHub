{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { ControlConfigComponent } from './control-config/control-config.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../shared/services/form.service\";\nimport * as i4 from \"../../shared/services/control.service\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"@angular/material/snack-bar\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/cdk/drag-drop\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/icon\";\nimport * as i12 from \"@angular/material/input\";\nimport * as i13 from \"@angular/material/progress-spinner\";\nconst _c0 = [\"editSectionDialog\"];\nfunction FormBuilderComponent_div_31_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23)(1, \"mat-icon\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const control_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.getControlIcon(control_r2.type));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(control_r2.label);\n  }\n}\nfunction FormBuilderComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"mat-icon\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, FormBuilderComponent_div_31_div_5_Template, 5, 2, \"div\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const control_r2 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"cdkDragData\", control_r2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.getControlIcon(control_r2.type));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(control_r2.label);\n  }\n}\nfunction FormBuilderComponent_div_33_div_1_div_10_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 39);\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormBuilderComponent_div_33_div_1_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 33)(1, \"div\", 34)(2, \"div\")(3, \"strong\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 35);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, FormBuilderComponent_div_33_div_1_div_10_span_7_Template, 2, 0, \"span\", 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 37)(9, \"button\", 38);\n    i0.ɵɵlistener(\"click\", function FormBuilderComponent_div_33_div_1_div_10_Template_button_click_9_listener() {\n      const control_r10 = i0.ɵɵrestoreView(_r9).$implicit;\n      const sectionIndex_r8 = i0.ɵɵnextContext().index;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.editControl(control_r10, sectionIndex_r8));\n    });\n    i0.ɵɵelementStart(10, \"mat-icon\");\n    i0.ɵɵtext(11, \"edit\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"button\", 38);\n    i0.ɵɵlistener(\"click\", function FormBuilderComponent_div_33_div_1_div_10_Template_button_click_12_listener() {\n      const controlIndex_r11 = i0.ɵɵrestoreView(_r9).index;\n      const sectionIndex_r8 = i0.ɵɵnextContext().index;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.deleteControl(controlIndex_r11, sectionIndex_r8));\n    });\n    i0.ɵɵelementStart(13, \"mat-icon\");\n    i0.ɵɵtext(14, \"delete\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const control_r10 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(control_r10.label);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(control_r10.type);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", control_r10.isRequired);\n  }\n}\nfunction FormBuilderComponent_div_33_div_1_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 40)(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"text_fields\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4, \"Drop controls here to add to this section\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction FormBuilderComponent_div_33_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 27)(1, \"div\", 28)(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function FormBuilderComponent_div_33_div_1_Template_button_click_4_listener() {\n      const ctx_r5 = i0.ɵɵrestoreView(_r5);\n      const section_r7 = ctx_r5.$implicit;\n      const sectionIndex_r8 = ctx_r5.index;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.addSection(section_r7, sectionIndex_r8));\n    });\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"edit\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(7, \"p\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"div\", 30);\n    i0.ɵɵlistener(\"cdkDropListDropped\", function FormBuilderComponent_div_33_div_1_Template_div_cdkDropListDropped_9_listener($event) {\n      const sectionIndex_r8 = i0.ɵɵrestoreView(_r5).index;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.dropControl($event, sectionIndex_r8));\n    });\n    i0.ɵɵtemplate(10, FormBuilderComponent_div_33_div_1_div_10_Template, 15, 3, \"div\", 31)(11, FormBuilderComponent_div_33_div_1_div_11_Template, 5, 0, \"div\", 32);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const section_r7 = ctx.$implicit;\n    const sectionIndex_r8 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", section_r7.title, \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(section_r7.description || \"First section of your form\");\n    i0.ɵɵadvance();\n    i0.ɵɵpropertyInterpolate1(\"id\", \"section-\", sectionIndex_r8, \"\");\n    i0.ɵɵproperty(\"cdkDropListData\", section_r7.controls)(\"cdkDropListConnectedTo\", ctx_r2.getSectionConnections());\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", section_r7.controls);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", section_r7.controls.length === 0);\n  }\n}\nfunction FormBuilderComponent_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, FormBuilderComponent_div_33_div_1_Template, 12, 8, \"div\", 24);\n    i0.ɵɵelementStart(2, \"div\", 25)(3, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function FormBuilderComponent_div_33_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.addSection());\n    });\n    i0.ɵɵelementStart(4, \"mat-icon\");\n    i0.ɵɵtext(5, \"add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \" Add New Section \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.form.sections);\n  }\n}\nfunction FormBuilderComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 41);\n    i0.ɵɵelement(1, \"mat-spinner\", 42);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormBuilderComponent_ng_template_35_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Title is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormBuilderComponent_ng_template_35_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"h2\", 43);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"mat-dialog-content\")(3, \"form\", 44)(4, \"mat-form-field\", 45)(5, \"mat-label\");\n    i0.ɵɵtext(6, \"Section Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 46);\n    i0.ɵɵtemplate(8, FormBuilderComponent_ng_template_35_mat_error_8_Template, 2, 0, \"mat-error\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"mat-form-field\", 47)(10, \"mat-label\");\n    i0.ɵɵtext(11, \"Section Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"textarea\", 48);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(13, \"mat-dialog-actions\", 49)(14, \"button\", 50);\n    i0.ɵɵtext(15, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function FormBuilderComponent_ng_template_35_Template_button_click_16_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.saveSectionDialog());\n    });\n    i0.ɵɵtext(17, \"Save\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    let tmp_4_0;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r2.isNewSection ? \"Add Section\" : \"Edit Section\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.sectionForm);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", (tmp_4_0 = ctx_r2.sectionForm.get(\"title\")) == null ? null : tmp_4_0.hasError(\"required\"));\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.sectionForm.invalid);\n  }\n}\nexport class FormBuilderComponent {\n  route;\n  router;\n  fb;\n  formService;\n  controlService;\n  dialog;\n  snackBar;\n  editSectionDialog;\n  formId = null;\n  form = null;\n  formGroup;\n  loading = false;\n  availableControls = [{\n    type: 'Text',\n    label: 'Text Field',\n    icon: 'text_fields',\n    id: 'text-control'\n  }, {\n    type: 'Textarea',\n    label: 'Text Area',\n    icon: 'notes',\n    id: 'textarea-control'\n  }, {\n    type: 'RadioGroup',\n    label: 'Radio Group',\n    icon: 'radio_button_checked',\n    id: 'radio-control'\n  }, {\n    type: 'CheckboxGroup',\n    label: 'Checkbox Group',\n    icon: 'check_box',\n    id: 'checkbox-control'\n  }, {\n    type: 'Dropdown',\n    label: 'Dropdown',\n    icon: 'arrow_drop_down_circle',\n    id: 'dropdown-control'\n  }, {\n    type: 'FileUpload',\n    label: 'File Upload',\n    icon: 'cloud_upload',\n    id: 'file-control'\n  }, {\n    type: 'Signature',\n    label: 'Signature',\n    icon: 'draw',\n    id: 'signature-control'\n  }, {\n    type: 'LocationPicker',\n    label: 'Location Picker',\n    icon: 'location_on',\n    id: 'location-control'\n  }, {\n    type: 'Note',\n    label: 'Note',\n    icon: 'info',\n    id: 'note-control'\n  }];\n  isNewSection = false;\n  sectionForm;\n  editingSectionIndex = -1;\n  constructor(route, router, fb, formService, controlService, dialog, snackBar) {\n    this.route = route;\n    this.router = router;\n    this.fb = fb;\n    this.formService = formService;\n    this.controlService = controlService;\n    this.dialog = dialog;\n    this.snackBar = snackBar;\n    this.formGroup = this.fb.group({\n      title: ['', Validators.required],\n      description: [''],\n      isPublished: [false]\n    });\n    this.sectionForm = this.fb.group({\n      title: ['', Validators.required],\n      description: ['']\n    });\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        this.formId = +params['id'];\n        this.loadForm(this.formId);\n      } else {\n        this.initNewForm();\n      }\n    });\n  }\n  loadForm(id) {\n    this.loading = true;\n    this.formService.getForm(id).subscribe({\n      next: form => {\n        this.form = form;\n        this.formGroup.patchValue({\n          title: form.title,\n          description: form.description,\n          isPublished: form.isPublished\n        });\n        this.loading = false;\n      },\n      error: err => {\n        this.snackBar.open('Error loading form: ' + err.message, 'Close', {\n          duration: 3000\n        });\n        this.loading = false;\n      }\n    });\n  }\n  initNewForm() {\n    this.form = {\n      id: 0,\n      title: 'New Form',\n      description: '',\n      isPublished: false,\n      createdBy: 'current-user',\n      // Replace with actual user ID\n      createdDate: new Date(),\n      modifiedDate: new Date(),\n      sections: [{\n        id: 0,\n        formId: 0,\n        title: 'Section 1',\n        description: '',\n        orderIndex: 0,\n        controls: []\n      }]\n    };\n  }\n  saveForm() {\n    if (!this.form) return;\n    this.loading = true;\n    // Update form with values from form group\n    this.form.title = this.formGroup.value.title;\n    this.form.description = this.formGroup.value.description;\n    this.form.isPublished = this.formGroup.value.isPublished;\n    if (this.formId) {\n      // Update existing form\n      this.form.id = this.formId; // Ensure ID is set correctly\n      this.formService.updateForm(this.form).subscribe({\n        next: updatedForm => {\n          this.form = updatedForm;\n          this.snackBar.open('Form updated successfully', 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error updating form: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    } else {\n      // Create new form\n      this.formService.createForm(this.form).subscribe({\n        next: newForm => {\n          this.form = newForm;\n          this.formId = newForm.id;\n          this.router.navigate(['/forms', this.formId]);\n          this.snackBar.open('Form created successfully', 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error creating form: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    }\n  }\n  publishForm() {\n    if (!this.formId) {\n      this.snackBar.open('Please save the form before publishing', 'Close', {\n        duration: 3000\n      });\n      return;\n    }\n    this.loading = true;\n    this.formService.publishForm(this.formId).subscribe({\n      next: response => {\n        this.form = response;\n        this.snackBar.open('Form published successfully', 'Close', {\n          duration: 3000\n        });\n        this.loading = false;\n      },\n      error: err => {\n        this.snackBar.open('Error publishing form: ' + err.message, 'Close', {\n          duration: 3000\n        });\n        this.loading = false;\n      }\n    });\n  }\n  addSection(section, sectionIndex) {\n    if (!this.form) return;\n    this.isNewSection = !section;\n    if (section && typeof sectionIndex === 'number') {\n      // Editing existing section\n      this.sectionForm.patchValue({\n        title: section.title,\n        description: section.description\n      });\n      this.editingSectionIndex = sectionIndex;\n    } else {\n      // Adding new section\n      this.sectionForm.patchValue({\n        title: `Section ${this.form.sections.length + 1}`,\n        description: ''\n      });\n      this.editingSectionIndex = -1;\n    }\n    this.dialog.open(this.editSectionDialog, {\n      width: '500px'\n    });\n  }\n  saveSectionDialog() {\n    if (this.sectionForm.invalid) {\n      return;\n    }\n    if (!this.form) return;\n    const sectionData = this.sectionForm.value;\n    if (this.isNewSection) {\n      // Add new section\n      const newSection = {\n        id: 0,\n        // Will be set by the backend\n        formId: this.form.id,\n        title: sectionData.title,\n        description: sectionData.description,\n        orderIndex: this.form.sections.length,\n        controls: []\n      };\n      this.form.sections.push(newSection);\n    } else if (this.editingSectionIndex >= 0) {\n      // Update existing section\n      this.form.sections[this.editingSectionIndex].title = sectionData.title;\n      this.form.sections[this.editingSectionIndex].description = sectionData.description;\n    }\n    this.dialog.closeAll();\n    this.snackBar.open('Section saved successfully', 'Close', {\n      duration: 3000\n    });\n  }\n  deleteSection(index) {\n    if (!this.form) return;\n    this.form.sections.splice(index, 1);\n    // Update the orderIndex for the remaining sections\n    this.form.sections.forEach((section, idx) => {\n      section.orderIndex = idx;\n    });\n  }\n  getSectionIds() {\n    if (!this.form) return [];\n    return this.form.sections.map((_, index) => `section-${index}`);\n  }\n  getSectionConnections() {\n    const sectionIds = this.getSectionIds();\n    return ['available-controls', ...sectionIds];\n  }\n  dropControl(event, sectionIndex) {\n    if (!this.form) return;\n    if (event.previousContainer === event.container) {\n      // Reordering within the same section\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n      // Update the orderIndex for the controls\n      event.container.data.forEach((control, idx) => {\n        control.orderIndex = idx;\n      });\n      if (this.formId) {\n        this.controlService.updateControlOrder(this.form.sections[sectionIndex].id, event.container.data.map(control => control.id)).subscribe();\n      }\n      this.snackBar.open('Control reordered', 'Close', {\n        duration: 2000\n      });\n    } else if (event.previousContainer.id === 'available-controls') {\n      // Dragging from available controls to a section\n      const draggedItem = event.item.data || this.availableControls[event.previousIndex];\n      const controlType = draggedItem.type;\n      // Show success message \n      this.snackBar.open(`Adding ${controlType} control`, 'Close', {\n        duration: 1500\n      });\n      // Open configuration dialog\n      this.openControlConfig(null, controlType, sectionIndex, event.currentIndex);\n    } else {\n      // Moving control between different sections\n      try {\n        const previousSectionIndex = parseInt(event.previousContainer.id.split('-')[1]);\n        const control = event.previousContainer.data[event.previousIndex];\n        // Remove from previous section\n        this.form.sections[previousSectionIndex].controls.splice(event.previousIndex, 1);\n        // Add to new section\n        control.sectionId = this.form.sections[sectionIndex].id;\n        this.form.sections[sectionIndex].controls.splice(event.currentIndex, 0, control);\n        // Update orderIndex in both sections\n        this.form.sections[previousSectionIndex].controls.forEach((c, idx) => {\n          c.orderIndex = idx;\n        });\n        this.form.sections[sectionIndex].controls.forEach((c, idx) => {\n          c.orderIndex = idx;\n        });\n        // API update would go here in production\n        this.snackBar.open('Control moved to new section', 'Close', {\n          duration: 2000\n        });\n      } catch (err) {\n        console.error('Error moving control between sections:', err);\n        this.snackBar.open('Error moving control', 'Close', {\n          duration: 2000\n        });\n      }\n    }\n  }\n  openControlConfig(control, type, sectionIndex, orderIndex) {\n    const dialogRef = this.dialog.open(ControlConfigComponent, {\n      width: '600px',\n      data: {\n        control,\n        type,\n        sectionId: this.form?.sections[sectionIndex].id,\n        availableControls: this.form?.sections.flatMap(s => s.controls) || []\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (control) {\n          // Update existing control\n          const sectionControls = this.form?.sections[sectionIndex].controls || [];\n          const controlIndex = sectionControls.findIndex(c => c.id === control.id);\n          if (controlIndex !== -1 && this.form) {\n            this.form.sections[sectionIndex].controls[controlIndex] = result;\n          }\n        } else {\n          // Add new control\n          const newControl = {\n            ...result,\n            orderIndex,\n            sectionId: this.form?.sections[sectionIndex].id || 0\n          };\n          if (this.form) {\n            this.form.sections[sectionIndex].controls.splice(orderIndex, 0, newControl);\n            // Update the orderIndex for the controls\n            this.form.sections[sectionIndex].controls.forEach((control, idx) => {\n              control.orderIndex = idx;\n            });\n          }\n        }\n      }\n    });\n  }\n  editControl(control, sectionIndex) {\n    this.openControlConfig(control, null, sectionIndex, control.orderIndex);\n  }\n  deleteControl(controlIndex, sectionIndex) {\n    if (!this.form) return;\n    const control = this.form.sections[sectionIndex].controls[controlIndex];\n    if (control.id && this.formId) {\n      this.controlService.deleteControl(control.id).subscribe({\n        next: () => {\n          this.form?.sections[sectionIndex].controls.splice(controlIndex, 1);\n          // Update the orderIndex for the remaining controls\n          this.form?.sections[sectionIndex].controls.forEach((c, idx) => {\n            c.orderIndex = idx;\n          });\n          this.snackBar.open('Control deleted successfully', 'Close', {\n            duration: 3000\n          });\n        },\n        error: err => {\n          this.snackBar.open('Error deleting control: ' + err.message, 'Close', {\n            duration: 3000\n          });\n        }\n      });\n    } else {\n      this.form.sections[sectionIndex].controls.splice(controlIndex, 1);\n      // Update the orderIndex for the remaining controls\n      this.form.sections[sectionIndex].controls.forEach((c, idx) => {\n        c.orderIndex = idx;\n      });\n    }\n  }\n  previewForm() {\n    if (this.formId) {\n      this.router.navigate(['/forms', this.formId, 'preview']);\n    } else {\n      this.snackBar.open('Please save the form before previewing', 'Close', {\n        duration: 3000\n      });\n    }\n  }\n  getControlIcon(type) {\n    const control = this.availableControls.find(c => c.type === type);\n    return control ? control.icon : 'help_outline';\n  }\n  static ɵfac = function FormBuilderComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FormBuilderComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.FormService), i0.ɵɵdirectiveInject(i4.ControlService), i0.ɵɵdirectiveInject(i5.MatDialog), i0.ɵɵdirectiveInject(i6.MatSnackBar));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormBuilderComponent,\n    selectors: [[\"app-form-builder\"]],\n    viewQuery: function FormBuilderComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editSectionDialog = _t.first);\n      }\n    },\n    standalone: false,\n    decls: 37,\n    vars: 9,\n    consts: [[\"editSectionDialog\", \"\"], [1, \"form-builder-container\"], [1, \"form-builder-header\"], [1, \"header-buttons\"], [\"mat-flat-button\", \"\", \"color\", \"primary\", 1, \"save-button\", 3, \"click\"], [\"mat-flat-button\", \"\", 1, \"preview-button\", 3, \"click\", \"disabled\"], [1, \"header-draft\"], [\"color\", \"primary\", 3, \"ngModelChange\", \"ngModel\"], [1, \"form-metadata\"], [1, \"form-title\"], [\"type\", \"text\", \"placeholder\", \"New Form\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"form-description\"], [\"placeholder\", \"Enter a description for your form\", \"rows\", \"3\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"form-content\"], [1, \"controls-panel\"], [1, \"panel-header\"], [\"cdkDropList\", \"\", \"id\", \"available-controls\", \"cdkDropListSortingDisabled\", \"true\", 1, \"controls-list\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\"], [\"class\", \"control-item\", \"cdkDrag\", \"\", 3, \"cdkDragData\", 4, \"ngFor\", \"ngForOf\"], [1, \"sections-panel\"], [4, \"ngIf\"], [\"class\", \"loading-spinner\", 4, \"ngIf\"], [\"cdkDrag\", \"\", 1, \"control-item\", 3, \"cdkDragData\"], [\"class\", \"control-drag-preview\", 4, \"cdkDragPreview\"], [1, \"control-drag-preview\"], [\"class\", \"section-container\", 4, \"ngFor\", \"ngForOf\"], [1, \"add-section-button\"], [\"mat-flat-button\", \"\", \"color\", \"primary\", 3, \"click\"], [1, \"section-container\"], [1, \"section-header\"], [\"mat-icon-button\", \"\", 1, \"edit-icon\", 3, \"click\"], [\"cdkDropList\", \"\", 1, \"section-content\", 3, \"cdkDropListDropped\", \"id\", \"cdkDropListData\", \"cdkDropListConnectedTo\"], [\"class\", \"control-item-added\", \"cdkDrag\", \"\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"empty-section\", 4, \"ngIf\"], [\"cdkDrag\", \"\", 1, \"control-item-added\"], [1, \"control-item-content\"], [1, \"control-type\"], [\"class\", \"required-badge\", 4, \"ngIf\"], [1, \"control-actions\"], [\"mat-icon-button\", \"\", 3, \"click\"], [1, \"required-badge\"], [1, \"empty-section\"], [1, \"loading-spinner\"], [\"diameter\", \"40\"], [\"mat-dialog-title\", \"\"], [3, \"formGroup\"], [1, \"w-100\", \"mb-3\"], [\"matInput\", \"\", \"formControlName\", \"title\", \"placeholder\", \"Enter section title\", \"required\", \"\"], [1, \"w-100\"], [\"matInput\", \"\", \"formControlName\", \"description\", \"placeholder\", \"Enter section description\", \"rows\", \"3\"], [\"align\", \"end\"], [\"mat-button\", \"\", \"mat-dialog-close\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\", \"disabled\"]],\n    template: function FormBuilderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3)(3, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function FormBuilderComponent_Template_button_click_3_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.saveForm());\n        });\n        i0.ɵɵelementStart(4, \"mat-icon\");\n        i0.ɵɵtext(5, \"save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(6, \" Save Form \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function FormBuilderComponent_Template_button_click_7_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.previewForm());\n        });\n        i0.ɵɵelementStart(8, \"mat-icon\");\n        i0.ɵɵtext(9, \"visibility\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(10, \" Preview Form \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"mat-slide-toggle\", 7);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function FormBuilderComponent_Template_mat_slide_toggle_ngModelChange_12_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          i0.ɵɵtwoWayBindingSet(ctx.form.isPublished, $event) || (ctx.form.isPublished = $event);\n          return i0.ɵɵresetView($event);\n        });\n        i0.ɵɵtext(13, \"Draft\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"div\", 8)(15, \"div\", 9)(16, \"label\");\n        i0.ɵɵtext(17, \"Form Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"input\", 10);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function FormBuilderComponent_Template_input_ngModelChange_18_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          i0.ɵɵtwoWayBindingSet(ctx.form.title, $event) || (ctx.form.title = $event);\n          return i0.ɵɵresetView($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"div\", 11)(20, \"label\");\n        i0.ɵɵtext(21, \"Form Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"textarea\", 12);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function FormBuilderComponent_Template_textarea_ngModelChange_22_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          i0.ɵɵtwoWayBindingSet(ctx.form.description, $event) || (ctx.form.description = $event);\n          return i0.ɵɵresetView($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(23, \"div\", 13)(24, \"div\", 14)(25, \"div\", 15)(26, \"h3\");\n        i0.ɵɵtext(27, \"Available Controls\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"p\");\n        i0.ɵɵtext(29, \"Drag controls to sections or click to add\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(30, \"div\", 16);\n        i0.ɵɵtemplate(31, FormBuilderComponent_div_31_Template, 6, 3, \"div\", 17);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(32, \"div\", 18);\n        i0.ɵɵtemplate(33, FormBuilderComponent_div_33_Template, 7, 1, \"div\", 19)(34, FormBuilderComponent_div_34_Template, 2, 0, \"div\", 20);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(35, FormBuilderComponent_ng_template_35_Template, 18, 4, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"disabled\", !ctx.form || ctx.form.sections.length === 0);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.form.isPublished);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.form.title);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.form.description);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.availableControls)(\"cdkDropListConnectedTo\", ctx.getSectionIds());\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngForOf\", ctx.availableControls);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.form);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    dependencies: [i7.NgForOf, i7.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.FormGroupDirective, i2.FormControlName, i8.CdkDropList, i8.CdkDrag, i8.CdkDragPreview, i9.MatButton, i9.MatIconButton, i5.MatDialogClose, i5.MatDialogTitle, i5.MatDialogActions, i5.MatDialogContent, i10.MatFormField, i10.MatLabel, i10.MatError, i11.MatIcon, i12.MatInput, i13.MatProgressSpinner],\n    styles: [\"\\n\\n.form-builder-container[_ngcontent-%COMP%] {\\n  max-width: 1200px;\\n  margin: 0 auto;\\n  padding: 20px;\\n  font-family: Arial, sans-serif;\\n}\\n\\n\\n\\n.form-builder-header[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  margin-bottom: 20px;\\n}\\n\\n.header-buttons[_ngcontent-%COMP%] {\\n  display: flex;\\n  gap: 10px;\\n}\\n\\n.save-button[_ngcontent-%COMP%] {\\n  background-color: #1a237e;\\n  color: white;\\n}\\n\\n.preview-button[_ngcontent-%COMP%] {\\n  background-color: white;\\n  color: #1a237e;\\n  border: 1px solid #e0e0e0;\\n}\\n\\n.header-draft[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n\\n\\n.form-metadata[_ngcontent-%COMP%] {\\n  background: white;\\n  border-radius: 8px;\\n  padding: 20px;\\n  margin-bottom: 20px;\\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\\n  border: 1px solid #e0e0e0;\\n}\\n\\n.form-title[_ngcontent-%COMP%], .form-description[_ngcontent-%COMP%] {\\n  margin-bottom: 15px;\\n}\\n\\n.form-title[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], .form-description[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n  display: block;\\n  font-weight: 500;\\n  margin-bottom: 5px;\\n  color: #333;\\n}\\n\\n.form-control[_ngcontent-%COMP%] {\\n  width: 100%;\\n  padding: 10px;\\n  border: 1px solid #e0e0e0;\\n  border-radius: 4px;\\n  font-size: 14px;\\n}\\n\\n.form-control[_ngcontent-%COMP%]:focus {\\n  outline: none;\\n  border-color: #1a237e;\\n}\\n\\n\\n\\n.form-content[_ngcontent-%COMP%] {\\n  display: flex;\\n  gap: 20px;\\n}\\n\\n\\n\\n.controls-panel[_ngcontent-%COMP%] {\\n  flex: 1;\\n  max-width: 300px;\\n  background: white;\\n  border-radius: 8px;\\n  padding: 15px;\\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\\n  border: 1px solid #e0e0e0;\\n}\\n\\n.panel-header[_ngcontent-%COMP%] {\\n  margin-bottom: 15px;\\n}\\n\\n.panel-header[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  margin: 0 0 5px 0;\\n  font-size: 16px;\\n  font-weight: 600;\\n}\\n\\n.panel-header[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  margin: 0;\\n  font-size: 12px;\\n  color: #757575;\\n}\\n\\n.controls-list[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 8px;\\n}\\n\\n.control-item[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  padding: 10px;\\n  border: 1px solid #e0e0e0;\\n  border-radius: 4px;\\n  background: #fff;\\n  cursor: move;\\n  transition: all 0.2s;\\n}\\n\\n.control-item[_ngcontent-%COMP%]:hover {\\n  background: #f5f5f5;\\n  border-color: #ccc;\\n}\\n\\n.control-item[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%] {\\n  margin-right: 10px;\\n  color: #666;\\n}\\n\\n.control-drag-preview[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  padding: 10px;\\n  border-radius: 4px;\\n  background: white;\\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\\n}\\n\\n\\n\\n.sections-panel[_ngcontent-%COMP%] {\\n  flex: 2;\\n  background: white;\\n  border-radius: 8px;\\n  padding: 15px;\\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\\n  border: 1px solid #e0e0e0;\\n}\\n\\n.section-container[_ngcontent-%COMP%] {\\n  margin-bottom: 20px;\\n}\\n\\n.section-header[_ngcontent-%COMP%] {\\n  margin-bottom: 10px;\\n}\\n\\n.section-header[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  margin: 0 0 5px 0;\\n  font-size: 16px;\\n  font-weight: 600;\\n}\\n\\n.edit-icon[_ngcontent-%COMP%] {\\n  margin-left: 8px;\\n  color: #757575;\\n  font-size: 16px;\\n}\\n\\n.section-header[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  margin: 0;\\n  font-size: 12px;\\n  color: #757575;\\n}\\n\\n.section-content[_ngcontent-%COMP%] {\\n  min-height: 120px;\\n  border: 1px dashed #ccc;\\n  border-radius: 4px;\\n  padding: 15px;\\n  background-color: #f9f9f9;\\n}\\n\\n.empty-section[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n  padding: 30px;\\n  color: #9e9e9e;\\n  text-align: center;\\n}\\n\\n.empty-section[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%] {\\n  font-size: 30px;\\n  margin-bottom: 10px;\\n  opacity: 0.5;\\n}\\n\\n.control-item-added[_ngcontent-%COMP%] {\\n  background: white;\\n  border: 1px solid #e0e0e0;\\n  border-radius: 4px;\\n  margin-bottom: 8px;\\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\\n}\\n\\n.control-item-content[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  padding: 10px 15px;\\n}\\n\\n.control-type[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  background: #f0f0f0;\\n  color: #757575;\\n  font-size: 12px;\\n  padding: 2px 6px;\\n  border-radius: 4px;\\n  margin-left: 8px;\\n}\\n\\n.required-badge[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  background: #ffebee;\\n  color: #d32f2f;\\n  font-size: 12px;\\n  padding: 2px 6px;\\n  border-radius: 4px;\\n  margin-left: 8px;\\n}\\n\\n.control-actions[_ngcontent-%COMP%] {\\n  display: flex;\\n}\\n\\n.add-section-button[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin-top: 20px;\\n}\\n\\n\\n\\n.cdk-drag-preview[_ngcontent-%COMP%] {\\n  box-sizing: border-box;\\n  border-radius: 4px;\\n  box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2), 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12);\\n  background-color: white;\\n}\\n\\n.cdk-drag-placeholder[_ngcontent-%COMP%] {\\n  opacity: 0.5;\\n  background: #f0f0f0;\\n  border: 1px dashed #ccc;\\n}\\n\\n.cdk-drag-animating[_ngcontent-%COMP%] {\\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\n}\\n\\n.cdk-drop-list-dragging[_ngcontent-%COMP%]   .control-item[_ngcontent-%COMP%]:not(.cdk-drag-placeholder) {\\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\\n}\\n\\n\\n\\n@media (max-width: 767px) {\\n  .form-content[_ngcontent-%COMP%] {\\n    flex-direction: column;\\n  }\\n  .controls-panel[_ngcontent-%COMP%] {\\n    max-width: 100%;\\n  }\\n}\"]\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}