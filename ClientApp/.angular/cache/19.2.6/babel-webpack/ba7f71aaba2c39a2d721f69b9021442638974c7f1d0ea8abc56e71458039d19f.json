{"ast":null,"code":"import { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../shared/services/workflow.service\";\nimport * as i3 from \"../../shared/services/form.service\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/datepicker\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/icon\";\nimport * as i11 from \"@angular/material/input\";\nimport * as i12 from \"@angular/material/progress-spinner\";\nimport * as i13 from \"@angular/material/select\";\nimport * as i14 from \"@angular/material/table\";\nexport let WorkflowComponent = /*#__PURE__*/(() => {\n  class WorkflowComponent {\n    fb;\n    workflowService;\n    formService;\n    snackBar;\n    assignments = [];\n    forms = [];\n    users = [{\n      id: 'user1',\n      name: 'John Doe'\n    }, {\n      id: 'user2',\n      name: 'Jane Smith'\n    }, {\n      id: 'user3',\n      name: 'Bob Johnson'\n    }]; // In a real app, this would come from a user service\n    loading = false;\n    displayedColumns = ['formTitle', 'assignedTo', 'assignedDate', 'dueDate', 'status', 'actions'];\n    newAssignmentForm;\n    showNewAssignmentForm = false;\n    constructor(fb, workflowService, formService, snackBar) {\n      this.fb = fb;\n      this.workflowService = workflowService;\n      this.formService = formService;\n      this.snackBar = snackBar;\n      this.newAssignmentForm = this.fb.group({\n        formId: ['', Validators.required],\n        userId: ['', Validators.required],\n        dueDate: [null]\n      });\n    }\n    ngOnInit() {\n      this.loadAssignments();\n      this.loadForms();\n    }\n    loadAssignments() {\n      this.loading = true;\n      this.workflowService.getAssignments().subscribe({\n        next: assignments => {\n          this.assignments = assignments;\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error loading assignments: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    }\n    loadForms() {\n      this.formService.getForms().subscribe({\n        next: forms => {\n          this.forms = forms.filter(f => f.isPublished);\n        },\n        error: err => {\n          this.snackBar.open('Error loading forms: ' + err.message, 'Close', {\n            duration: 3000\n          });\n        }\n      });\n    }\n    toggleNewAssignmentForm() {\n      this.showNewAssignmentForm = !this.showNewAssignmentForm;\n      if (!this.showNewAssignmentForm) {\n        this.newAssignmentForm.reset();\n      }\n    }\n    assignForm() {\n      if (this.newAssignmentForm.invalid) {\n        this.snackBar.open('Please complete all required fields', 'Close', {\n          duration: 3000\n        });\n        return;\n      }\n      const formValue = this.newAssignmentForm.value;\n      const assignment = {\n        id: 0,\n        formId: formValue.formId,\n        userId: formValue.userId,\n        assignedDate: new Date(),\n        dueDate: formValue.dueDate ? new Date(formValue.dueDate) : undefined,\n        status: 'Assigned'\n      };\n      this.loading = true;\n      this.workflowService.createAssignment(assignment).subscribe({\n        next: response => {\n          this.assignments.push(response);\n          this.snackBar.open('Form assigned successfully', 'Close', {\n            duration: 3000\n          });\n          this.toggleNewAssignmentForm();\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error assigning form: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    }\n    completeAssignment(id) {\n      this.loading = true;\n      this.workflowService.completeAssignment(id).subscribe({\n        next: response => {\n          const index = this.assignments.findIndex(a => a.id === id);\n          if (index !== -1) {\n            this.assignments[index] = response;\n          }\n          this.snackBar.open('Assignment marked as completed', 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error completing assignment: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    }\n    deleteAssignment(id) {\n      this.loading = true;\n      this.workflowService.deleteAssignment(id).subscribe({\n        next: () => {\n          this.assignments = this.assignments.filter(a => a.id !== id);\n          this.snackBar.open('Assignment deleted successfully', 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error deleting assignment: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    }\n    getFormTitle(formId) {\n      const form = this.forms.find(f => f.id === formId);\n      return form ? form.title : `Form #${formId}`;\n    }\n    getUserName(userId) {\n      const user = this.users.find(u => u.id === userId);\n      return user ? user.name : userId;\n    }\n    formatDate(date) {\n      return date ? new Date(date).toLocaleDateString() : 'Not set';\n    }\n    getStatusBadgeClass(status) {\n      switch (status) {\n        case 'Assigned':\n          return 'badge-primary';\n        case 'InProgress':\n          return 'badge-warning';\n        case 'Completed':\n          return 'badge-success';\n        default:\n          return 'badge-secondary';\n      }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"19.2.5\",\n      ngImport: i0,\n      type: WorkflowComponent,\n      deps: [{\n        token: i1.FormBuilder\n      }, {\n        token: i2.WorkflowService\n      }, {\n        token: i3.FormService\n      }, {\n        token: i4.MatSnackBar\n      }],\n      target: i0.ɵɵFactoryTarget.Component\n    });\n    static ɵcmp = i0.ɵɵngDeclareComponent({\n      minVersion: \"14.0.0\",\n      version: \"19.2.5\",\n      type: WorkflowComponent,\n      isStandalone: false,\n      selector: \"app-workflow\",\n      ngImport: i0,\n      template: \"<div class=\\\"container mt-4\\\">\\n  <div class=\\\"d-flex justify-content-between align-items-center mb-4\\\">\\n    <h1>Form Assignments</h1>\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"toggleNewAssignmentForm()\\\">\\n      <mat-icon>add</mat-icon> Assign Form\\n    </button>\\n  </div>\\n\\n  <div *ngIf=\\\"showNewAssignmentForm\\\" class=\\\"mb-4\\\">\\n    <mat-card>\\n      <mat-card-header>\\n        <mat-card-title>New Assignment</mat-card-title>\\n      </mat-card-header>\\n      <mat-card-content>\\n        <form [formGroup]=\\\"newAssignmentForm\\\" (ngSubmit)=\\\"assignForm()\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-4\\\">\\n              <mat-form-field class=\\\"w-100\\\">\\n                <mat-label>Form</mat-label>\\n                <mat-select formControlName=\\\"formId\\\">\\n                  <mat-option *ngFor=\\\"let form of forms\\\" [value]=\\\"form.id\\\">\\n                    {{ form.title }}\\n                  </mat-option>\\n                </mat-select>\\n                <mat-error *ngIf=\\\"newAssignmentForm.get('formId')?.hasError('required')\\\">\\n                  Form is required\\n                </mat-error>\\n              </mat-form-field>\\n            </div>\\n            \\n            <div class=\\\"col-md-4\\\">\\n              <mat-form-field class=\\\"w-100\\\">\\n                <mat-label>Assign To</mat-label>\\n                <mat-select formControlName=\\\"userId\\\">\\n                  <mat-option *ngFor=\\\"let user of users\\\" [value]=\\\"user.id\\\">\\n                    {{ user.name }}\\n                  </mat-option>\\n                </mat-select>\\n                <mat-error *ngIf=\\\"newAssignmentForm.get('userId')?.hasError('required')\\\">\\n                  User is required\\n                </mat-error>\\n              </mat-form-field>\\n            </div>\\n            \\n            <div class=\\\"col-md-4\\\">\\n              <mat-form-field class=\\\"w-100\\\">\\n                <mat-label>Due Date</mat-label>\\n                <input matInput [matDatepicker]=\\\"picker\\\" formControlName=\\\"dueDate\\\">\\n                <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #picker></mat-datepicker>\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          \\n          <div class=\\\"text-right\\\">\\n            <button mat-button type=\\\"button\\\" (click)=\\\"toggleNewAssignmentForm()\\\">Cancel</button>\\n            <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"loading\\\">\\n              Assign\\n            </button>\\n          </div>\\n        </form>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n\\n  <div *ngIf=\\\"loading\\\" class=\\\"d-flex justify-content-center\\\">\\n    <mat-spinner diameter=\\\"40\\\"></mat-spinner>\\n  </div>\\n\\n  <div *ngIf=\\\"!loading\\\">\\n    <mat-card>\\n      <mat-card-content>\\n        <table mat-table [dataSource]=\\\"assignments\\\" class=\\\"w-100\\\">\\n          <!-- Form Title Column -->\\n          <ng-container matColumnDef=\\\"formTitle\\\">\\n            <th mat-header-cell *matHeaderCellDef>Form</th>\\n            <td mat-cell *matCellDef=\\\"let assignment\\\">{{ getFormTitle(assignment.formId) }}</td>\\n          </ng-container>\\n\\n          <!-- Assigned To Column -->\\n          <ng-container matColumnDef=\\\"assignedTo\\\">\\n            <th mat-header-cell *matHeaderCellDef>Assigned To</th>\\n            <td mat-cell *matCellDef=\\\"let assignment\\\">{{ getUserName(assignment.userId) }}</td>\\n          </ng-container>\\n\\n          <!-- Assigned Date Column -->\\n          <ng-container matColumnDef=\\\"assignedDate\\\">\\n            <th mat-header-cell *matHeaderCellDef>Assigned Date</th>\\n            <td mat-cell *matCellDef=\\\"let assignment\\\">{{ formatDate(assignment.assignedDate) }}</td>\\n          </ng-container>\\n\\n          <!-- Due Date Column -->\\n          <ng-container matColumnDef=\\\"dueDate\\\">\\n            <th mat-header-cell *matHeaderCellDef>Due Date</th>\\n            <td mat-cell *matCellDef=\\\"let assignment\\\">{{ formatDate(assignment.dueDate) }}</td>\\n          </ng-container>\\n\\n          <!-- Status Column -->\\n          <ng-container matColumnDef=\\\"status\\\">\\n            <th mat-header-cell *matHeaderCellDef>Status</th>\\n            <td mat-cell *matCellDef=\\\"let assignment\\\">\\n              <span class=\\\"badge\\\" [ngClass]=\\\"getStatusBadgeClass(assignment.status)\\\">\\n                {{ assignment.status }}\\n              </span>\\n            </td>\\n          </ng-container>\\n\\n          <!-- Actions Column -->\\n          <ng-container matColumnDef=\\\"actions\\\">\\n            <th mat-header-cell *matHeaderCellDef>Actions</th>\\n            <td mat-cell *matCellDef=\\\"let assignment\\\">\\n              <button mat-icon-button color=\\\"accent\\\" \\n                     (click)=\\\"completeAssignment(assignment.id)\\\"\\n                     [disabled]=\\\"assignment.status === 'Completed'\\\">\\n                <mat-icon>check_circle</mat-icon>\\n              </button>\\n              <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteAssignment(assignment.id)\\\">\\n                <mat-icon>delete</mat-icon>\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n        </table>\\n\\n        <div *ngIf=\\\"assignments.length === 0\\\" class=\\\"p-4 text-center\\\">\\n          <p class=\\\"text-muted\\\">No assignments found</p>\\n        </div>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n</div>\\n\",\n      dependencies: [{\n        kind: \"directive\",\n        type: i5.NgClass,\n        selector: \"[ngClass]\",\n        inputs: [\"class\", \"ngClass\"]\n      }, {\n        kind: \"directive\",\n        type: i5.NgForOf,\n        selector: \"[ngFor][ngForOf]\",\n        inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"]\n      }, {\n        kind: \"directive\",\n        type: i5.NgIf,\n        selector: \"[ngIf]\",\n        inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"]\n      }, {\n        kind: \"directive\",\n        type: i1.ɵNgNoValidate,\n        selector: \"form:not([ngNoForm]):not([ngNativeValidate])\"\n      }, {\n        kind: \"directive\",\n        type: i1.DefaultValueAccessor,\n        selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\"\n      }, {\n        kind: \"directive\",\n        type: i1.NgControlStatus,\n        selector: \"[formControlName],[ngModel],[formControl]\"\n      }, {\n        kind: \"directive\",\n        type: i1.NgControlStatusGroup,\n        selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\"\n      }, {\n        kind: \"directive\",\n        type: i1.FormGroupDirective,\n        selector: \"[formGroup]\",\n        inputs: [\"formGroup\"],\n        outputs: [\"ngSubmit\"],\n        exportAs: [\"ngForm\"]\n      }, {\n        kind: \"directive\",\n        type: i1.FormControlName,\n        selector: \"[formControlName]\",\n        inputs: [\"formControlName\", \"disabled\", \"ngModel\"],\n        outputs: [\"ngModelChange\"]\n      }, {\n        kind: \"component\",\n        type: i6.MatButton,\n        selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \",\n        exportAs: [\"matButton\"]\n      }, {\n        kind: \"component\",\n        type: i6.MatIconButton,\n        selector: \"button[mat-icon-button]\",\n        exportAs: [\"matButton\"]\n      }, {\n        kind: \"component\",\n        type: i7.MatCard,\n        selector: \"mat-card\",\n        inputs: [\"appearance\"],\n        exportAs: [\"matCard\"]\n      }, {\n        kind: \"directive\",\n        type: i7.MatCardContent,\n        selector: \"mat-card-content\"\n      }, {\n        kind: \"component\",\n        type: i7.MatCardHeader,\n        selector: \"mat-card-header\"\n      }, {\n        kind: \"directive\",\n        type: i7.MatCardTitle,\n        selector: \"mat-card-title, [mat-card-title], [matCardTitle]\"\n      }, {\n        kind: \"component\",\n        type: i8.MatDatepicker,\n        selector: \"mat-datepicker\",\n        exportAs: [\"matDatepicker\"]\n      }, {\n        kind: \"directive\",\n        type: i8.MatDatepickerInput,\n        selector: \"input[matDatepicker]\",\n        inputs: [\"matDatepicker\", \"min\", \"max\", \"matDatepickerFilter\"],\n        exportAs: [\"matDatepickerInput\"]\n      }, {\n        kind: \"component\",\n        type: i8.MatDatepickerToggle,\n        selector: \"mat-datepicker-toggle\",\n        inputs: [\"for\", \"tabIndex\", \"aria-label\", \"disabled\", \"disableRipple\"],\n        exportAs: [\"matDatepickerToggle\"]\n      }, {\n        kind: \"component\",\n        type: i9.MatFormField,\n        selector: \"mat-form-field\",\n        inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"],\n        exportAs: [\"matFormField\"]\n      }, {\n        kind: \"directive\",\n        type: i9.MatLabel,\n        selector: \"mat-label\"\n      }, {\n        kind: \"directive\",\n        type: i9.MatError,\n        selector: \"mat-error, [matError]\",\n        inputs: [\"id\"]\n      }, {\n        kind: \"directive\",\n        type: i9.MatSuffix,\n        selector: \"[matSuffix], [matIconSuffix], [matTextSuffix]\",\n        inputs: [\"matTextSuffix\"]\n      }, {\n        kind: \"component\",\n        type: i10.MatIcon,\n        selector: \"mat-icon\",\n        inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"],\n        exportAs: [\"matIcon\"]\n      }, {\n        kind: \"directive\",\n        type: i11.MatInput,\n        selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\",\n        inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\", \"disabledInteractive\"],\n        exportAs: [\"matInput\"]\n      }, {\n        kind: \"component\",\n        type: i12.MatProgressSpinner,\n        selector: \"mat-progress-spinner, mat-spinner\",\n        inputs: [\"color\", \"mode\", \"value\", \"diameter\", \"strokeWidth\"],\n        exportAs: [\"matProgressSpinner\"]\n      }, {\n        kind: \"component\",\n        type: i13.MatSelect,\n        selector: \"mat-select\",\n        inputs: [\"aria-describedby\", \"panelClass\", \"disabled\", \"disableRipple\", \"tabIndex\", \"hideSingleSelectionIndicator\", \"placeholder\", \"required\", \"multiple\", \"disableOptionCentering\", \"compareWith\", \"value\", \"aria-label\", \"aria-labelledby\", \"errorStateMatcher\", \"typeaheadDebounceInterval\", \"sortComparator\", \"id\", \"panelWidth\", \"canSelectNullableOptions\"],\n        outputs: [\"openedChange\", \"opened\", \"closed\", \"selectionChange\", \"valueChange\"],\n        exportAs: [\"matSelect\"]\n      }, {\n        kind: \"component\",\n        type: i13.MatOption,\n        selector: \"mat-option\",\n        inputs: [\"value\", \"id\", \"disabled\"],\n        outputs: [\"onSelectionChange\"],\n        exportAs: [\"matOption\"]\n      }, {\n        kind: \"component\",\n        type: i14.MatTable,\n        selector: \"mat-table, table[mat-table]\",\n        exportAs: [\"matTable\"]\n      }, {\n        kind: \"directive\",\n        type: i14.MatHeaderCellDef,\n        selector: \"[matHeaderCellDef]\"\n      }, {\n        kind: \"directive\",\n        type: i14.MatHeaderRowDef,\n        selector: \"[matHeaderRowDef]\",\n        inputs: [\"matHeaderRowDef\", \"matHeaderRowDefSticky\"]\n      }, {\n        kind: \"directive\",\n        type: i14.MatColumnDef,\n        selector: \"[matColumnDef]\",\n        inputs: [\"matColumnDef\"]\n      }, {\n        kind: \"directive\",\n        type: i14.MatCellDef,\n        selector: \"[matCellDef]\"\n      }, {\n        kind: \"directive\",\n        type: i14.MatRowDef,\n        selector: \"[matRowDef]\",\n        inputs: [\"matRowDefColumns\", \"matRowDefWhen\"]\n      }, {\n        kind: \"directive\",\n        type: i14.MatHeaderCell,\n        selector: \"mat-header-cell, th[mat-header-cell]\"\n      }, {\n        kind: \"directive\",\n        type: i14.MatCell,\n        selector: \"mat-cell, td[mat-cell]\"\n      }, {\n        kind: \"component\",\n        type: i14.MatHeaderRow,\n        selector: \"mat-header-row, tr[mat-header-row]\",\n        exportAs: [\"matHeaderRow\"]\n      }, {\n        kind: \"component\",\n        type: i14.MatRow,\n        selector: \"mat-row, tr[mat-row]\",\n        exportAs: [\"matRow\"]\n      }]\n    });\n  }\n  return WorkflowComponent;\n})();\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.5\",\n  ngImport: i0,\n  type: WorkflowComponent,\n  decorators: [{\n    type: Component,\n    args: [{\n      selector: 'app-workflow',\n      standalone: false,\n      template: \"<div class=\\\"container mt-4\\\">\\n  <div class=\\\"d-flex justify-content-between align-items-center mb-4\\\">\\n    <h1>Form Assignments</h1>\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"toggleNewAssignmentForm()\\\">\\n      <mat-icon>add</mat-icon> Assign Form\\n    </button>\\n  </div>\\n\\n  <div *ngIf=\\\"showNewAssignmentForm\\\" class=\\\"mb-4\\\">\\n    <mat-card>\\n      <mat-card-header>\\n        <mat-card-title>New Assignment</mat-card-title>\\n      </mat-card-header>\\n      <mat-card-content>\\n        <form [formGroup]=\\\"newAssignmentForm\\\" (ngSubmit)=\\\"assignForm()\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-4\\\">\\n              <mat-form-field class=\\\"w-100\\\">\\n                <mat-label>Form</mat-label>\\n                <mat-select formControlName=\\\"formId\\\">\\n                  <mat-option *ngFor=\\\"let form of forms\\\" [value]=\\\"form.id\\\">\\n                    {{ form.title }}\\n                  </mat-option>\\n                </mat-select>\\n                <mat-error *ngIf=\\\"newAssignmentForm.get('formId')?.hasError('required')\\\">\\n                  Form is required\\n                </mat-error>\\n              </mat-form-field>\\n            </div>\\n            \\n            <div class=\\\"col-md-4\\\">\\n              <mat-form-field class=\\\"w-100\\\">\\n                <mat-label>Assign To</mat-label>\\n                <mat-select formControlName=\\\"userId\\\">\\n                  <mat-option *ngFor=\\\"let user of users\\\" [value]=\\\"user.id\\\">\\n                    {{ user.name }}\\n                  </mat-option>\\n                </mat-select>\\n                <mat-error *ngIf=\\\"newAssignmentForm.get('userId')?.hasError('required')\\\">\\n                  User is required\\n                </mat-error>\\n              </mat-form-field>\\n            </div>\\n            \\n            <div class=\\\"col-md-4\\\">\\n              <mat-form-field class=\\\"w-100\\\">\\n                <mat-label>Due Date</mat-label>\\n                <input matInput [matDatepicker]=\\\"picker\\\" formControlName=\\\"dueDate\\\">\\n                <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #picker></mat-datepicker>\\n              </mat-form-field>\\n            </div>\\n          </div>\\n          \\n          <div class=\\\"text-right\\\">\\n            <button mat-button type=\\\"button\\\" (click)=\\\"toggleNewAssignmentForm()\\\">Cancel</button>\\n            <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"loading\\\">\\n              Assign\\n            </button>\\n          </div>\\n        </form>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n\\n  <div *ngIf=\\\"loading\\\" class=\\\"d-flex justify-content-center\\\">\\n    <mat-spinner diameter=\\\"40\\\"></mat-spinner>\\n  </div>\\n\\n  <div *ngIf=\\\"!loading\\\">\\n    <mat-card>\\n      <mat-card-content>\\n        <table mat-table [dataSource]=\\\"assignments\\\" class=\\\"w-100\\\">\\n          <!-- Form Title Column -->\\n          <ng-container matColumnDef=\\\"formTitle\\\">\\n            <th mat-header-cell *matHeaderCellDef>Form</th>\\n            <td mat-cell *matCellDef=\\\"let assignment\\\">{{ getFormTitle(assignment.formId) }}</td>\\n          </ng-container>\\n\\n          <!-- Assigned To Column -->\\n          <ng-container matColumnDef=\\\"assignedTo\\\">\\n            <th mat-header-cell *matHeaderCellDef>Assigned To</th>\\n            <td mat-cell *matCellDef=\\\"let assignment\\\">{{ getUserName(assignment.userId) }}</td>\\n          </ng-container>\\n\\n          <!-- Assigned Date Column -->\\n          <ng-container matColumnDef=\\\"assignedDate\\\">\\n            <th mat-header-cell *matHeaderCellDef>Assigned Date</th>\\n            <td mat-cell *matCellDef=\\\"let assignment\\\">{{ formatDate(assignment.assignedDate) }}</td>\\n          </ng-container>\\n\\n          <!-- Due Date Column -->\\n          <ng-container matColumnDef=\\\"dueDate\\\">\\n            <th mat-header-cell *matHeaderCellDef>Due Date</th>\\n            <td mat-cell *matCellDef=\\\"let assignment\\\">{{ formatDate(assignment.dueDate) }}</td>\\n          </ng-container>\\n\\n          <!-- Status Column -->\\n          <ng-container matColumnDef=\\\"status\\\">\\n            <th mat-header-cell *matHeaderCellDef>Status</th>\\n            <td mat-cell *matCellDef=\\\"let assignment\\\">\\n              <span class=\\\"badge\\\" [ngClass]=\\\"getStatusBadgeClass(assignment.status)\\\">\\n                {{ assignment.status }}\\n              </span>\\n            </td>\\n          </ng-container>\\n\\n          <!-- Actions Column -->\\n          <ng-container matColumnDef=\\\"actions\\\">\\n            <th mat-header-cell *matHeaderCellDef>Actions</th>\\n            <td mat-cell *matCellDef=\\\"let assignment\\\">\\n              <button mat-icon-button color=\\\"accent\\\" \\n                     (click)=\\\"completeAssignment(assignment.id)\\\"\\n                     [disabled]=\\\"assignment.status === 'Completed'\\\">\\n                <mat-icon>check_circle</mat-icon>\\n              </button>\\n              <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteAssignment(assignment.id)\\\">\\n                <mat-icon>delete</mat-icon>\\n              </button>\\n            </td>\\n          </ng-container>\\n\\n          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n        </table>\\n\\n        <div *ngIf=\\\"assignments.length === 0\\\" class=\\\"p-4 text-center\\\">\\n          <p class=\\\"text-muted\\\">No assignments found</p>\\n        </div>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n</div>\\n\"\n    }]\n  }],\n  ctorParameters: () => [{\n    type: i1.FormBuilder\n  }, {\n    type: i2.WorkflowService\n  }, {\n    type: i3.FormService\n  }, {\n    type: i4.MatSnackBar\n  }]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}