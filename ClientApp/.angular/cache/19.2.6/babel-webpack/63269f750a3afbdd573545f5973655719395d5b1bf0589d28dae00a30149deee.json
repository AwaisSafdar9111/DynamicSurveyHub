{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/checkbox\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/select\";\nconst _c0 = () => [\"RadioGroup\", \"CheckboxGroup\", \"Dropdown\"];\nfunction ControlConfigComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Label is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ControlConfigComponent_mat_checkbox_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 31);\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ControlConfigComponent_div_40_mat_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r1.value);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", type_r1.label, \" \");\n  }\n}\nfunction ControlConfigComponent_div_40_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32)(1, \"div\", 3)(2, \"div\", 32)(3, \"mat-form-field\", 5)(4, \"mat-label\");\n    i0.ɵɵtext(5, \"Min Value\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 37);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 32)(8, \"mat-form-field\", 5)(9, \"mat-label\");\n    i0.ɵɵtext(10, \"Max Value\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(11, \"input\", 38);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction ControlConfigComponent_div_40_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32)(1, \"mat-checkbox\", 39);\n    i0.ɵɵtext(2, \"Enable Country Code Selector\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ControlConfigComponent_div_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"div\", 32)(2, \"mat-form-field\", 5)(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Input Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-select\", 33);\n    i0.ɵɵtemplate(6, ControlConfigComponent_div_40_mat_option_6_Template, 2, 2, \"mat-option\", 34);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(7, ControlConfigComponent_div_40_div_7_Template, 12, 0, \"div\", 35)(8, ControlConfigComponent_div_40_div_8_Template, 3, 0, \"div\", 35);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    let tmp_2_0;\n    let tmp_3_0;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.inputTypes);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx_r1.form.get(\"configuration.inputType\")) == null ? null : tmp_2_0.value) === \"Number\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx_r1.form.get(\"configuration.inputType\")) == null ? null : tmp_3_0.value) === \"Phone\");\n  }\n}\nfunction ControlConfigComponent_div_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"div\", 32)(2, \"mat-form-field\", 5)(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Max Length\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 40);\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction ControlConfigComponent_div_42_mat_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r3.value);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", type_r3.label, \" \");\n  }\n}\nfunction ControlConfigComponent_div_42_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32)(1, \"mat-checkbox\", 42);\n    i0.ɵɵtext(2, \"Searchable\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ControlConfigComponent_div_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"div\", 32)(2, \"mat-form-field\", 5)(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Selection Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-select\", 41);\n    i0.ɵɵtemplate(6, ControlConfigComponent_div_42_mat_option_6_Template, 2, 2, \"mat-option\", 34);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(7, ControlConfigComponent_div_42_div_7_Template, 3, 0, \"div\", 35);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.selectionTypes);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.controlType === \"Dropdown\");\n  }\n}\nfunction ControlConfigComponent_div_43_mat_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r4.value);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", type_r4.label, \" \");\n  }\n}\nfunction ControlConfigComponent_div_43_mat_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r5.value);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", type_r5.label, \" \");\n  }\n}\nfunction ControlConfigComponent_div_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"div\", 32)(2, \"mat-form-field\", 5)(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Selection Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-select\", 41);\n    i0.ɵɵtemplate(6, ControlConfigComponent_div_43_mat_option_6_Template, 2, 2, \"mat-option\", 34);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(7, \"div\", 19)(8, \"mat-form-field\", 5)(9, \"mat-label\");\n    i0.ɵɵtext(10, \"Accepted File Types\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"mat-select\", 43);\n    i0.ɵɵtemplate(12, ControlConfigComponent_div_43_mat_option_12_Template, 2, 2, \"mat-option\", 34);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.selectionTypes);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.acceptedFileTypes);\n  }\n}\nfunction ControlConfigComponent_div_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"div\", 32)(2, \"mat-checkbox\", 44);\n    i0.ɵɵtext(3, \"Show Map\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction ControlConfigComponent_div_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"div\", 19)(2, \"mat-form-field\", 5)(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Note Text\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"textarea\", 45);\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction ControlConfigComponent_div_46_div_7_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Value is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ControlConfigComponent_div_46_div_7_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Text is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ControlConfigComponent_div_46_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 49)(1, \"div\", 8)(2, \"mat-form-field\", 5)(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Value\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 50);\n    i0.ɵɵtemplate(6, ControlConfigComponent_div_46_div_7_mat_error_6_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 8)(8, \"mat-form-field\", 5)(9, \"mat-label\");\n    i0.ɵɵtext(10, \"Text\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(11, \"input\", 51);\n    i0.ɵɵtemplate(12, ControlConfigComponent_div_46_div_7_mat_error_12_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"div\", 52)(14, \"mat-form-field\", 5)(15, \"mat-label\");\n    i0.ɵɵtext(16, \"Score\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(17, \"input\", 53);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"div\", 54)(19, \"button\", 55);\n    i0.ɵɵlistener(\"click\", function ControlConfigComponent_div_46_div_7_Template_button_click_19_listener() {\n      const i_r8 = i0.ɵɵrestoreView(_r7).index;\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.removeOption(i_r8));\n    });\n    i0.ɵɵelementStart(20, \"mat-icon\");\n    i0.ɵɵtext(21, \"delete\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    let tmp_5_0;\n    let tmp_6_0;\n    const option_r9 = ctx.$implicit;\n    const i_r8 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"formGroupName\", i_r8);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", (tmp_5_0 = option_r9.get(\"value\")) == null ? null : tmp_5_0.hasError(\"required\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", (tmp_6_0 = option_r9.get(\"text\")) == null ? null : tmp_6_0.hasError(\"required\"));\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.options.length <= 1);\n  }\n}\nfunction ControlConfigComponent_div_46_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 24)(1, \"h3\");\n    i0.ɵɵtext(2, \" Options \");\n    i0.ɵɵelementStart(3, \"button\", 46);\n    i0.ɵɵlistener(\"click\", function ControlConfigComponent_div_46_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.addOption());\n    });\n    i0.ɵɵelementStart(4, \"mat-icon\");\n    i0.ɵɵtext(5, \"add\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(6, \"div\", 47);\n    i0.ɵɵtemplate(7, ControlConfigComponent_div_46_div_7_Template, 22, 4, \"div\", 48);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.options.controls);\n  }\n}\nfunction ControlConfigComponent_div_53_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" No source controls available for conditions. Add other controls to the form first. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ControlConfigComponent_div_54_div_1_mat_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const control_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", control_r11.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", control_r11.label, \" \");\n  }\n}\nfunction ControlConfigComponent_div_54_div_1_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Source control is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ControlConfigComponent_div_54_div_1_mat_option_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const op_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", op_r12.value);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", op_r12.label, \" \");\n  }\n}\nfunction ControlConfigComponent_div_54_div_1_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Operator is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ControlConfigComponent_div_54_div_1_mat_error_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Value is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ControlConfigComponent_div_54_div_1_mat_option_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const action_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", action_r13.value);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", action_r13.label, \" \");\n  }\n}\nfunction ControlConfigComponent_div_54_div_1_mat_error_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Action is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ControlConfigComponent_div_54_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 49)(1, \"div\", 52)(2, \"mat-form-field\", 5)(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Source Control\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-select\", 58);\n    i0.ɵɵtemplate(6, ControlConfigComponent_div_54_div_1_mat_option_6_Template, 2, 2, \"mat-option\", 34);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, ControlConfigComponent_div_54_div_1_mat_error_7_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 59)(9, \"mat-form-field\", 5)(10, \"mat-label\");\n    i0.ɵɵtext(11, \"Operator\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"mat-select\", 60);\n    i0.ɵɵtemplate(13, ControlConfigComponent_div_54_div_1_mat_option_13_Template, 2, 2, \"mat-option\", 34);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(14, ControlConfigComponent_div_54_div_1_mat_error_14_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 59)(16, \"mat-form-field\", 5)(17, \"mat-label\");\n    i0.ɵɵtext(18, \"Value\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(19, \"input\", 61);\n    i0.ɵɵtemplate(20, ControlConfigComponent_div_54_div_1_mat_error_20_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(21, \"div\", 59)(22, \"mat-form-field\", 5)(23, \"mat-label\");\n    i0.ɵɵtext(24, \"Action\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"mat-select\", 62);\n    i0.ɵɵtemplate(26, ControlConfigComponent_div_54_div_1_mat_option_26_Template, 2, 2, \"mat-option\", 34);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(27, ControlConfigComponent_div_54_div_1_mat_error_27_Template, 2, 0, \"mat-error\", 7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(28, \"div\", 54)(29, \"button\", 63);\n    i0.ɵɵlistener(\"click\", function ControlConfigComponent_div_54_div_1_Template_button_click_29_listener() {\n      const i_r14 = i0.ɵɵrestoreView(_r10).index;\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.removeCondition(i_r14));\n    });\n    i0.ɵɵelementStart(30, \"mat-icon\");\n    i0.ɵɵtext(31, \"delete\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    let tmp_6_0;\n    let tmp_8_0;\n    let tmp_9_0;\n    let tmp_11_0;\n    const condition_r15 = ctx.$implicit;\n    const i_r14 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"formGroupName\", i_r14);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.availableSourceControls);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (tmp_6_0 = condition_r15.get(\"sourceControlId\")) == null ? null : tmp_6_0.hasError(\"required\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.conditionOperators);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (tmp_8_0 = condition_r15.get(\"operator\")) == null ? null : tmp_8_0.hasError(\"required\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", (tmp_9_0 = condition_r15.get(\"value\")) == null ? null : tmp_9_0.hasError(\"required\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.conditionActions);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (tmp_11_0 = condition_r15.get(\"action\")) == null ? null : tmp_11_0.hasError(\"required\"));\n  }\n}\nfunction ControlConfigComponent_div_54_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 57);\n    i0.ɵɵtemplate(1, ControlConfigComponent_div_54_div_1_Template, 32, 8, \"div\", 48);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.conditions.controls);\n  }\n}\nexport let ControlConfigComponent = /*#__PURE__*/(() => {\n  class ControlConfigComponent {\n    constructor(fb, dialogRef, data) {\n      this.fb = fb;\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.availableSourceControls = [];\n      this.conditionOperators = [{\n        value: 'Equals',\n        label: 'Equals'\n      }, {\n        value: 'NotEquals',\n        label: 'Not Equals'\n      }, {\n        value: 'Contains',\n        label: 'Contains'\n      }, {\n        value: 'GreaterThan',\n        label: 'Greater Than'\n      }, {\n        value: 'LessThan',\n        label: 'Less Than'\n      }];\n      this.conditionActions = [{\n        value: 'Show',\n        label: 'Show'\n      }, {\n        value: 'Hide',\n        label: 'Hide'\n      }, {\n        value: 'Enable',\n        label: 'Enable'\n      }, {\n        value: 'Disable',\n        label: 'Disable'\n      }];\n      this.inputTypes = [{\n        value: 'Text',\n        label: 'Text'\n      }, {\n        value: 'Number',\n        label: 'Number'\n      }, {\n        value: 'Email',\n        label: 'Email'\n      }, {\n        value: 'Phone',\n        label: 'Phone'\n      }];\n      this.selectionTypes = [{\n        value: 'Single',\n        label: 'Single Selection'\n      }, {\n        value: 'Multiple',\n        label: 'Multiple Selection'\n      }];\n      this.acceptedFileTypes = [{\n        value: '.pdf',\n        label: 'PDF'\n      }, {\n        value: '.doc,.docx',\n        label: 'Word Document'\n      }, {\n        value: '.jpg,.jpeg,.png',\n        label: 'Images'\n      }, {\n        value: '.csv',\n        label: 'CSV'\n      }, {\n        value: '.xls,.xlsx',\n        label: 'Excel'\n      }];\n      this.controlType = data.control?.type || data.type || 'Text';\n      this.form = this.createForm();\n      // Filter out the current control from available source controls\n      this.availableSourceControls = data.availableControls.filter(c => !data.control || c.id !== data.control.id);\n    }\n    ngOnInit() {\n      this.updateFormBasedOnType();\n      if (this.data.control) {\n        this.patchFormWithControlData();\n      }\n      // Listen for control type changes\n      this.form.get('type')?.valueChanges.subscribe(type => {\n        this.controlType = type;\n        this.updateFormBasedOnType();\n      });\n    }\n    createForm() {\n      return this.fb.group({\n        id: [0],\n        sectionId: [this.data.sectionId],\n        label: ['', Validators.required],\n        type: [this.controlType, Validators.required],\n        isRequired: [false],\n        orderIndex: [0],\n        configuration: this.fb.group({\n          id: [0],\n          controlId: [0],\n          inputType: ['Text'],\n          minValue: [null],\n          maxValue: [null],\n          enableCountryCode: [false],\n          maxLength: [null],\n          selectionType: ['Single'],\n          searchable: [false],\n          acceptedFileTypes: [[]],\n          showMap: [true],\n          noteText: [''],\n          htmlContent: ['']\n        }),\n        options: this.fb.array([]),\n        conditions: this.fb.array([])\n      });\n    }\n    updateFormBasedOnType() {\n      // Reset configuration values\n      const configForm = this.form.get('configuration');\n      configForm.reset({\n        id: 0,\n        controlId: 0\n      });\n      // Clear options if not applicable\n      const optionsArray = this.form.get('options');\n      optionsArray.clear();\n      // Add default option for select controls\n      if (['RadioGroup', 'CheckboxGroup', 'Dropdown'].includes(this.controlType)) {\n        this.addOption();\n      }\n      // Set default values based on type\n      switch (this.controlType) {\n        case 'Text':\n          configForm.patchValue({\n            inputType: 'Text'\n          });\n          break;\n        case 'Textarea':\n          configForm.patchValue({\n            maxLength: 1000\n          });\n          break;\n        case 'RadioGroup':\n        case 'CheckboxGroup':\n          configForm.patchValue({\n            selectionType: this.controlType === 'RadioGroup' ? 'Single' : 'Multiple'\n          });\n          break;\n        case 'Dropdown':\n          configForm.patchValue({\n            selectionType: 'Single',\n            searchable: false\n          });\n          break;\n        case 'FileUpload':\n          configForm.patchValue({\n            acceptedFileTypes: ['.pdf', '.jpg', '.jpeg', '.png'],\n            selectionType: 'Single'\n          });\n          break;\n        case 'LocationPicker':\n          configForm.patchValue({\n            showMap: true\n          });\n          break;\n        case 'Note':\n          configForm.patchValue({\n            noteText: ''\n          });\n          break;\n      }\n    }\n    patchFormWithControlData() {\n      if (!this.data.control) return;\n      const control = this.data.control;\n      // Patch main form fields\n      this.form.patchValue({\n        id: control.id,\n        sectionId: control.sectionId,\n        label: control.label,\n        type: control.type,\n        isRequired: control.isRequired,\n        orderIndex: control.orderIndex,\n        configuration: control.configuration\n      });\n      // Patch options if any\n      if (control.options && control.options.length > 0) {\n        const optionsArray = this.form.get('options');\n        optionsArray.clear();\n        control.options.forEach(option => {\n          optionsArray.push(this.fb.group({\n            id: [option.id],\n            controlId: [option.controlId],\n            value: [option.value, Validators.required],\n            text: [option.text, Validators.required],\n            score: [option.score],\n            orderIndex: [option.orderIndex]\n          }));\n        });\n      }\n      // Patch conditions if any\n      if (control.conditions && control.conditions.length > 0) {\n        const conditionsArray = this.form.get('conditions');\n        conditionsArray.clear();\n        control.conditions.forEach(condition => {\n          conditionsArray.push(this.fb.group({\n            id: [condition.id],\n            controlId: [condition.controlId],\n            sourceControlId: [condition.sourceControlId, Validators.required],\n            operator: [condition.operator, Validators.required],\n            value: [condition.value, Validators.required],\n            action: [condition.action, Validators.required]\n          }));\n        });\n      }\n    }\n    get options() {\n      return this.form.get('options');\n    }\n    get conditions() {\n      return this.form.get('conditions');\n    }\n    addOption() {\n      const optionsArray = this.form.get('options');\n      optionsArray.push(this.fb.group({\n        id: [0],\n        controlId: [0],\n        value: ['', Validators.required],\n        text: ['', Validators.required],\n        score: [0],\n        orderIndex: [optionsArray.length]\n      }));\n    }\n    removeOption(index) {\n      const optionsArray = this.form.get('options');\n      optionsArray.removeAt(index);\n      // Update orderIndex for remaining options\n      optionsArray.controls.forEach((control, idx) => {\n        control.get('orderIndex')?.setValue(idx);\n      });\n    }\n    addCondition() {\n      const conditionsArray = this.form.get('conditions');\n      conditionsArray.push(this.fb.group({\n        id: [0],\n        controlId: [0],\n        sourceControlId: ['', Validators.required],\n        operator: ['Equals', Validators.required],\n        value: ['', Validators.required],\n        action: ['Show', Validators.required]\n      }));\n    }\n    removeCondition(index) {\n      const conditionsArray = this.form.get('conditions');\n      conditionsArray.removeAt(index);\n    }\n    onSubmit() {\n      if (this.form.invalid) {\n        return;\n      }\n      const formValue = this.form.value;\n      // Prepare control data\n      const controlData = {\n        id: formValue.id,\n        sectionId: formValue.sectionId,\n        label: formValue.label,\n        type: formValue.type,\n        isRequired: formValue.isRequired,\n        orderIndex: formValue.orderIndex,\n        configuration: formValue.configuration,\n        options: formValue.options,\n        conditions: formValue.conditions\n      };\n      this.dialogRef.close(controlData);\n    }\n    onCancel() {\n      this.dialogRef.close();\n    }\n    static {\n      this.ɵfac = function ControlConfigComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ControlConfigComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ControlConfigComponent,\n        selectors: [[\"app-control-config\"]],\n        decls: 60,\n        vars: 19,\n        consts: [[\"mat-dialog-title\", \"\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"mat-typography\"], [1, \"row\"], [1, \"col-md-8\"], [1, \"w-100\"], [\"matInput\", \"\", \"formControlName\", \"label\", \"placeholder\", \"Enter control label\"], [4, \"ngIf\"], [1, \"col-md-4\"], [\"formControlName\", \"type\", 3, \"disabled\"], [\"value\", \"Text\"], [\"value\", \"Textarea\"], [\"value\", \"RadioGroup\"], [\"value\", \"CheckboxGroup\"], [\"value\", \"Dropdown\"], [\"value\", \"FileUpload\"], [\"value\", \"Signature\"], [\"value\", \"LocationPicker\"], [\"value\", \"Note\"], [1, \"col-md-12\"], [\"formControlName\", \"isRequired\", 4, \"ngIf\"], [\"formGroupName\", \"configuration\", 1, \"mt-3\"], [\"class\", \"row\", 4, \"ngIf\"], [\"class\", \"mt-3\", 4, \"ngIf\"], [1, \"mt-3\"], [\"type\", \"button\", \"mat-mini-fab\", \"\", \"color\", \"primary\", 1, \"ml-2\", 3, \"click\", \"disabled\"], [\"class\", \"alert alert-info\", 4, \"ngIf\"], [\"formArrayName\", \"conditions\", 4, \"ngIf\"], [\"align\", \"end\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"], [\"formControlName\", \"isRequired\"], [1, \"col-md-6\"], [\"formControlName\", \"inputType\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"col-md-6\", 4, \"ngIf\"], [3, \"value\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"minValue\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"maxValue\"], [\"formControlName\", \"enableCountryCode\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"maxLength\"], [\"formControlName\", \"selectionType\"], [\"formControlName\", \"searchable\"], [\"formControlName\", \"acceptedFileTypes\", \"multiple\", \"\"], [\"formControlName\", \"showMap\"], [\"matInput\", \"\", \"formControlName\", \"noteText\", \"rows\", \"4\"], [\"type\", \"button\", \"mat-mini-fab\", \"\", \"color\", \"primary\", 1, \"ml-2\", 3, \"click\"], [\"formArrayName\", \"options\"], [\"class\", \"row align-items-center mb-2\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\", \"align-items-center\", \"mb-2\", 3, \"formGroupName\"], [\"matInput\", \"\", \"formControlName\", \"value\", \"placeholder\", \"Option value\"], [\"matInput\", \"\", \"formControlName\", \"text\", \"placeholder\", \"Option text\"], [1, \"col-md-3\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"score\", \"placeholder\", \"Score\"], [1, \"col-md-1\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"color\", \"warn\", 3, \"click\", \"disabled\"], [1, \"alert\", \"alert-info\"], [\"formArrayName\", \"conditions\"], [\"formControlName\", \"sourceControlId\"], [1, \"col-md-2\"], [\"formControlName\", \"operator\"], [\"matInput\", \"\", \"formControlName\", \"value\", \"placeholder\", \"Condition value\"], [\"formControlName\", \"action\"], [\"type\", \"button\", \"mat-icon-button\", \"\", \"color\", \"warn\", 3, \"click\"]],\n        template: function ControlConfigComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h2\", 0);\n            i0.ɵɵtext(1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"form\", 1);\n            i0.ɵɵlistener(\"ngSubmit\", function ControlConfigComponent_Template_form_ngSubmit_2_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(3, \"mat-dialog-content\", 2)(4, \"div\", 3)(5, \"div\", 4)(6, \"mat-form-field\", 5)(7, \"mat-label\");\n            i0.ɵɵtext(8, \"Label\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(9, \"input\", 6);\n            i0.ɵɵtemplate(10, ControlConfigComponent_mat_error_10_Template, 2, 0, \"mat-error\", 7);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(11, \"div\", 8)(12, \"mat-form-field\", 5)(13, \"mat-label\");\n            i0.ɵɵtext(14, \"Control Type\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(15, \"mat-select\", 9)(16, \"mat-option\", 10);\n            i0.ɵɵtext(17, \"Text Field\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(18, \"mat-option\", 11);\n            i0.ɵɵtext(19, \"Textarea\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(20, \"mat-option\", 12);\n            i0.ɵɵtext(21, \"Radio Group\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(22, \"mat-option\", 13);\n            i0.ɵɵtext(23, \"Checkbox Group\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(24, \"mat-option\", 14);\n            i0.ɵɵtext(25, \"Dropdown\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(26, \"mat-option\", 15);\n            i0.ɵɵtext(27, \"File Upload\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(28, \"mat-option\", 16);\n            i0.ɵɵtext(29, \"Signature\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(30, \"mat-option\", 17);\n            i0.ɵɵtext(31, \"Location Picker\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(32, \"mat-option\", 18);\n            i0.ɵɵtext(33, \"Note/Information\");\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵelementStart(34, \"div\", 3)(35, \"div\", 19);\n            i0.ɵɵtemplate(36, ControlConfigComponent_mat_checkbox_36_Template, 2, 0, \"mat-checkbox\", 20);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(37, \"div\", 21)(38, \"h3\");\n            i0.ɵɵtext(39, \"Control Configuration\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(40, ControlConfigComponent_div_40_Template, 9, 3, \"div\", 22)(41, ControlConfigComponent_div_41_Template, 6, 0, \"div\", 22)(42, ControlConfigComponent_div_42_Template, 8, 2, \"div\", 22)(43, ControlConfigComponent_div_43_Template, 13, 2, \"div\", 22)(44, ControlConfigComponent_div_44_Template, 4, 0, \"div\", 22)(45, ControlConfigComponent_div_45_Template, 6, 0, \"div\", 22);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(46, ControlConfigComponent_div_46_Template, 8, 1, \"div\", 23);\n            i0.ɵɵelementStart(47, \"div\", 24)(48, \"h3\");\n            i0.ɵɵtext(49, \" Conditional Logic \");\n            i0.ɵɵelementStart(50, \"button\", 25);\n            i0.ɵɵlistener(\"click\", function ControlConfigComponent_Template_button_click_50_listener() {\n              return ctx.addCondition();\n            });\n            i0.ɵɵelementStart(51, \"mat-icon\");\n            i0.ɵɵtext(52, \"add\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵtemplate(53, ControlConfigComponent_div_53_Template, 2, 0, \"div\", 26)(54, ControlConfigComponent_div_54_Template, 2, 1, \"div\", 27);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(55, \"mat-dialog-actions\", 28)(56, \"button\", 29);\n            i0.ɵɵlistener(\"click\", function ControlConfigComponent_Template_button_click_56_listener() {\n              return ctx.onCancel();\n            });\n            i0.ɵɵtext(57, \"Cancel\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(58, \"button\", 30);\n            i0.ɵɵtext(59);\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            let tmp_2_0;\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate(ctx.data.control ? \"Edit Control\" : \"Add New Control\");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.form.get(\"label\")) == null ? null : tmp_2_0.hasError(\"required\"));\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"disabled\", !!ctx.data.control);\n            i0.ɵɵadvance(21);\n            i0.ɵɵproperty(\"ngIf\", ctx.controlType !== \"Note\");\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", ctx.controlType === \"Text\");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.controlType === \"Textarea\");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", i0.ɵɵpureFunction0(17, _c0).includes(ctx.controlType));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.controlType === \"FileUpload\");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.controlType === \"LocationPicker\");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.controlType === \"Note\");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", i0.ɵɵpureFunction0(18, _c0).includes(ctx.controlType));\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"disabled\", ctx.availableSourceControls.length === 0);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.availableSourceControls.length === 0);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.availableSourceControls.length > 0);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"disabled\", ctx.form.invalid);\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate1(\" \", ctx.data.control ? \"Update\" : \"Add\", \" \");\n          }\n        },\n        dependencies: [i3.NgForOf, i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName, i4.MatButton, i4.MatIconButton, i4.MatMiniFabButton, i5.MatCheckbox, i2.MatDialogTitle, i2.MatDialogActions, i2.MatDialogContent, i6.MatFormField, i6.MatLabel, i6.MatError, i7.MatIcon, i8.MatInput, i9.MatSelect, i9.MatOption],\n        encapsulation: 2\n      });\n    }\n  }\n  return ControlConfigComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}