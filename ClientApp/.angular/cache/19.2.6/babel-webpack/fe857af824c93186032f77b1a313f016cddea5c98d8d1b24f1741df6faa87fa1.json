{"ast":null,"code":"import { Component, Inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/checkbox\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/select\";\nexport let ControlConfigComponent = /*#__PURE__*/(() => {\n  class ControlConfigComponent {\n    fb;\n    dialogRef;\n    data;\n    form;\n    controlType;\n    availableSourceControls = [];\n    conditionOperators = [{\n      value: 'Equals',\n      label: 'Equals'\n    }, {\n      value: 'NotEquals',\n      label: 'Not Equals'\n    }, {\n      value: 'Contains',\n      label: 'Contains'\n    }, {\n      value: 'GreaterThan',\n      label: 'Greater Than'\n    }, {\n      value: 'LessThan',\n      label: 'Less Than'\n    }];\n    conditionActions = [{\n      value: 'Show',\n      label: 'Show'\n    }, {\n      value: 'Hide',\n      label: 'Hide'\n    }, {\n      value: 'Enable',\n      label: 'Enable'\n    }, {\n      value: 'Disable',\n      label: 'Disable'\n    }];\n    inputTypes = [{\n      value: 'Text',\n      label: 'Text'\n    }, {\n      value: 'Number',\n      label: 'Number'\n    }, {\n      value: 'Email',\n      label: 'Email'\n    }, {\n      value: 'Phone',\n      label: 'Phone'\n    }];\n    selectionTypes = [{\n      value: 'Single',\n      label: 'Single Selection'\n    }, {\n      value: 'Multiple',\n      label: 'Multiple Selection'\n    }];\n    acceptedFileTypes = [{\n      value: '.pdf',\n      label: 'PDF'\n    }, {\n      value: '.doc,.docx',\n      label: 'Word Document'\n    }, {\n      value: '.jpg,.jpeg,.png',\n      label: 'Images'\n    }, {\n      value: '.csv',\n      label: 'CSV'\n    }, {\n      value: '.xls,.xlsx',\n      label: 'Excel'\n    }];\n    constructor(fb, dialogRef, data) {\n      this.fb = fb;\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.controlType = data.control?.type || data.type || 'Text';\n      this.form = this.createForm();\n      // Filter out the current control from available source controls\n      this.availableSourceControls = data.availableControls.filter(c => !data.control || c.id !== data.control.id);\n    }\n    ngOnInit() {\n      this.updateFormBasedOnType();\n      if (this.data.control) {\n        this.patchFormWithControlData();\n      }\n      // Listen for control type changes\n      this.form.get('type')?.valueChanges.subscribe(type => {\n        this.controlType = type;\n        this.updateFormBasedOnType();\n      });\n    }\n    createForm() {\n      return this.fb.group({\n        id: [0],\n        sectionId: [this.data.sectionId],\n        label: ['', Validators.required],\n        type: [this.controlType, Validators.required],\n        isRequired: [false],\n        orderIndex: [0],\n        configuration: this.fb.group({\n          id: [0],\n          controlId: [0],\n          inputType: ['Text'],\n          minValue: [null],\n          maxValue: [null],\n          enableCountryCode: [false],\n          maxLength: [null],\n          selectionType: ['Single'],\n          searchable: [false],\n          acceptedFileTypes: [[]],\n          showMap: [true],\n          noteText: [''],\n          htmlContent: ['']\n        }),\n        options: this.fb.array([]),\n        conditions: this.fb.array([])\n      });\n    }\n    updateFormBasedOnType() {\n      // Reset configuration values\n      const configForm = this.form.get('configuration');\n      configForm.reset({\n        id: 0,\n        controlId: 0\n      });\n      // Clear options if not applicable\n      const optionsArray = this.form.get('options');\n      optionsArray.clear();\n      // Add default option for select controls\n      if (['RadioGroup', 'CheckboxGroup', 'Dropdown'].includes(this.controlType)) {\n        this.addOption();\n      }\n      // Set default values based on type\n      switch (this.controlType) {\n        case 'Text':\n          configForm.patchValue({\n            inputType: 'Text'\n          });\n          break;\n        case 'Textarea':\n          configForm.patchValue({\n            maxLength: 1000\n          });\n          break;\n        case 'RadioGroup':\n        case 'CheckboxGroup':\n          configForm.patchValue({\n            selectionType: this.controlType === 'RadioGroup' ? 'Single' : 'Multiple'\n          });\n          break;\n        case 'Dropdown':\n          configForm.patchValue({\n            selectionType: 'Single',\n            searchable: false\n          });\n          break;\n        case 'FileUpload':\n          configForm.patchValue({\n            acceptedFileTypes: ['.pdf', '.jpg', '.jpeg', '.png'],\n            selectionType: 'Single'\n          });\n          break;\n        case 'LocationPicker':\n          configForm.patchValue({\n            showMap: true\n          });\n          break;\n        case 'Note':\n          configForm.patchValue({\n            noteText: ''\n          });\n          break;\n      }\n    }\n    patchFormWithControlData() {\n      if (!this.data.control) return;\n      const control = this.data.control;\n      // Patch main form fields\n      this.form.patchValue({\n        id: control.id,\n        sectionId: control.sectionId,\n        label: control.label,\n        type: control.type,\n        isRequired: control.isRequired,\n        orderIndex: control.orderIndex,\n        configuration: control.configuration\n      });\n      // Patch options if any\n      if (control.options && control.options.length > 0) {\n        const optionsArray = this.form.get('options');\n        optionsArray.clear();\n        control.options.forEach(option => {\n          optionsArray.push(this.fb.group({\n            id: [option.id],\n            controlId: [option.controlId],\n            value: [option.value, Validators.required],\n            text: [option.text, Validators.required],\n            score: [option.score],\n            orderIndex: [option.orderIndex]\n          }));\n        });\n      }\n      // Patch conditions if any\n      if (control.conditions && control.conditions.length > 0) {\n        const conditionsArray = this.form.get('conditions');\n        conditionsArray.clear();\n        control.conditions.forEach(condition => {\n          conditionsArray.push(this.fb.group({\n            id: [condition.id],\n            controlId: [condition.controlId],\n            sourceControlId: [condition.sourceControlId, Validators.required],\n            operator: [condition.operator, Validators.required],\n            value: [condition.value, Validators.required],\n            action: [condition.action, Validators.required]\n          }));\n        });\n      }\n    }\n    get options() {\n      return this.form.get('options');\n    }\n    get conditions() {\n      return this.form.get('conditions');\n    }\n    addOption() {\n      const optionsArray = this.form.get('options');\n      optionsArray.push(this.fb.group({\n        id: [0],\n        controlId: [0],\n        value: ['', Validators.required],\n        text: ['', Validators.required],\n        score: [0],\n        orderIndex: [optionsArray.length]\n      }));\n    }\n    removeOption(index) {\n      const optionsArray = this.form.get('options');\n      optionsArray.removeAt(index);\n      // Update orderIndex for remaining options\n      optionsArray.controls.forEach((control, idx) => {\n        control.get('orderIndex')?.setValue(idx);\n      });\n    }\n    addCondition() {\n      const conditionsArray = this.form.get('conditions');\n      conditionsArray.push(this.fb.group({\n        id: [0],\n        controlId: [0],\n        sourceControlId: ['', Validators.required],\n        operator: ['Equals', Validators.required],\n        value: ['', Validators.required],\n        action: ['Show', Validators.required]\n      }));\n    }\n    removeCondition(index) {\n      const conditionsArray = this.form.get('conditions');\n      conditionsArray.removeAt(index);\n    }\n    onSubmit() {\n      if (this.form.invalid) {\n        return;\n      }\n      const formValue = this.form.value;\n      // Prepare control data\n      const controlData = {\n        id: formValue.id,\n        sectionId: formValue.sectionId,\n        label: formValue.label,\n        type: formValue.type,\n        isRequired: formValue.isRequired,\n        orderIndex: formValue.orderIndex,\n        configuration: formValue.configuration,\n        options: formValue.options,\n        conditions: formValue.conditions\n      };\n      this.dialogRef.close(controlData);\n    }\n    onCancel() {\n      this.dialogRef.close();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"19.2.5\",\n      ngImport: i0,\n      type: ControlConfigComponent,\n      deps: [{\n        token: i1.FormBuilder\n      }, {\n        token: i2.MatDialogRef\n      }, {\n        token: MAT_DIALOG_DATA\n      }],\n      target: i0.ɵɵFactoryTarget.Component\n    });\n    static ɵcmp = i0.ɵɵngDeclareComponent({\n      minVersion: \"14.0.0\",\n      version: \"19.2.5\",\n      type: ControlConfigComponent,\n      isStandalone: false,\n      selector: \"app-control-config\",\n      ngImport: i0,\n      template: \"<h2 mat-dialog-title>{{ data.control ? 'Edit Control' : 'Add New Control' }}</h2>\\n\\n<form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  <mat-dialog-content class=\\\"mat-typography\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-8\\\">\\n        <mat-form-field class=\\\"w-100\\\">\\n          <mat-label>Label</mat-label>\\n          <input matInput formControlName=\\\"label\\\" placeholder=\\\"Enter control label\\\">\\n          <mat-error *ngIf=\\\"form.get('label')?.hasError('required')\\\">Label is required</mat-error>\\n        </mat-form-field>\\n      </div>\\n\\n      <div class=\\\"col-md-4\\\">\\n        <mat-form-field class=\\\"w-100\\\">\\n          <mat-label>Control Type</mat-label>\\n          <mat-select formControlName=\\\"type\\\" [disabled]=\\\"!!data.control\\\">\\n            <mat-option value=\\\"Text\\\">Text Field</mat-option>\\n            <mat-option value=\\\"Textarea\\\">Textarea</mat-option>\\n            <mat-option value=\\\"RadioGroup\\\">Radio Group</mat-option>\\n            <mat-option value=\\\"CheckboxGroup\\\">Checkbox Group</mat-option>\\n            <mat-option value=\\\"Dropdown\\\">Dropdown</mat-option>\\n            <mat-option value=\\\"FileUpload\\\">File Upload</mat-option>\\n            <mat-option value=\\\"Signature\\\">Signature</mat-option>\\n            <mat-option value=\\\"LocationPicker\\\">Location Picker</mat-option>\\n            <mat-option value=\\\"Note\\\">Note/Information</mat-option>\\n          </mat-select>\\n        </mat-form-field>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <mat-checkbox formControlName=\\\"isRequired\\\" *ngIf=\\\"controlType !== 'Note'\\\">Required</mat-checkbox>\\n      </div>\\n    </div>\\n\\n    <!-- Configuration based on control type -->\\n    <div formGroupName=\\\"configuration\\\" class=\\\"mt-3\\\">\\n      <h3>Control Configuration</h3>\\n\\n      <!-- Text Configuration -->\\n      <div *ngIf=\\\"controlType === 'Text'\\\" class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"w-100\\\">\\n            <mat-label>Input Type</mat-label>\\n            <mat-select formControlName=\\\"inputType\\\">\\n              <mat-option *ngFor=\\\"let type of inputTypes\\\" [value]=\\\"type.value\\\">\\n                {{ type.label }}\\n              </mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n        \\n        <div class=\\\"col-md-6\\\" *ngIf=\\\"form.get('configuration.inputType')?.value === 'Number'\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6\\\">\\n              <mat-form-field class=\\\"w-100\\\">\\n                <mat-label>Min Value</mat-label>\\n                <input matInput type=\\\"number\\\" formControlName=\\\"minValue\\\">\\n              </mat-form-field>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n              <mat-form-field class=\\\"w-100\\\">\\n                <mat-label>Max Value</mat-label>\\n                <input matInput type=\\\"number\\\" formControlName=\\\"maxValue\\\">\\n              </mat-form-field>\\n            </div>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"col-md-6\\\" *ngIf=\\\"form.get('configuration.inputType')?.value === 'Phone'\\\">\\n          <mat-checkbox formControlName=\\\"enableCountryCode\\\">Enable Country Code Selector</mat-checkbox>\\n        </div>\\n      </div>\\n\\n      <!-- Textarea Configuration -->\\n      <div *ngIf=\\\"controlType === 'Textarea'\\\" class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"w-100\\\">\\n            <mat-label>Max Length</mat-label>\\n            <input matInput type=\\\"number\\\" formControlName=\\\"maxLength\\\">\\n          </mat-form-field>\\n        </div>\\n      </div>\\n\\n      <!-- Radio/Checkbox/Dropdown Configuration -->\\n      <div *ngIf=\\\"['RadioGroup', 'CheckboxGroup', 'Dropdown'].includes(controlType)\\\" class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"w-100\\\">\\n            <mat-label>Selection Type</mat-label>\\n            <mat-select formControlName=\\\"selectionType\\\">\\n              <mat-option *ngFor=\\\"let type of selectionTypes\\\" [value]=\\\"type.value\\\">\\n                {{ type.label }}\\n              </mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n        \\n        <div class=\\\"col-md-6\\\" *ngIf=\\\"controlType === 'Dropdown'\\\">\\n          <mat-checkbox formControlName=\\\"searchable\\\">Searchable</mat-checkbox>\\n        </div>\\n      </div>\\n\\n      <!-- File Upload Configuration -->\\n      <div *ngIf=\\\"controlType === 'FileUpload'\\\" class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"w-100\\\">\\n            <mat-label>Selection Type</mat-label>\\n            <mat-select formControlName=\\\"selectionType\\\">\\n              <mat-option *ngFor=\\\"let type of selectionTypes\\\" [value]=\\\"type.value\\\">\\n                {{ type.label }}\\n              </mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n        \\n        <div class=\\\"col-md-12\\\">\\n          <mat-form-field class=\\\"w-100\\\">\\n            <mat-label>Accepted File Types</mat-label>\\n            <mat-select formControlName=\\\"acceptedFileTypes\\\" multiple>\\n              <mat-option *ngFor=\\\"let type of acceptedFileTypes\\\" [value]=\\\"type.value\\\">\\n                {{ type.label }}\\n              </mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n      </div>\\n\\n      <!-- Location Picker Configuration -->\\n      <div *ngIf=\\\"controlType === 'LocationPicker'\\\" class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-checkbox formControlName=\\\"showMap\\\">Show Map</mat-checkbox>\\n        </div>\\n      </div>\\n\\n      <!-- Note Configuration -->\\n      <div *ngIf=\\\"controlType === 'Note'\\\" class=\\\"row\\\">\\n        <div class=\\\"col-md-12\\\">\\n          <mat-form-field class=\\\"w-100\\\">\\n            <mat-label>Note Text</mat-label>\\n            <textarea matInput formControlName=\\\"noteText\\\" rows=\\\"4\\\"></textarea>\\n          </mat-form-field>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <!-- Options Configuration -->\\n    <div *ngIf=\\\"['RadioGroup', 'CheckboxGroup', 'Dropdown'].includes(controlType)\\\" class=\\\"mt-3\\\">\\n      <h3>\\n        Options\\n        <button type=\\\"button\\\" mat-mini-fab color=\\\"primary\\\" class=\\\"ml-2\\\" (click)=\\\"addOption()\\\">\\n          <mat-icon>add</mat-icon>\\n        </button>\\n      </h3>\\n      \\n      <div formArrayName=\\\"options\\\">\\n        <div *ngFor=\\\"let option of options.controls; let i = index\\\" [formGroupName]=\\\"i\\\" class=\\\"row align-items-center mb-2\\\">\\n          <div class=\\\"col-md-4\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Value</mat-label>\\n              <input matInput formControlName=\\\"value\\\" placeholder=\\\"Option value\\\">\\n              <mat-error *ngIf=\\\"option.get('value')?.hasError('required')\\\">Value is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-4\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Text</mat-label>\\n              <input matInput formControlName=\\\"text\\\" placeholder=\\\"Option text\\\">\\n              <mat-error *ngIf=\\\"option.get('text')?.hasError('required')\\\">Text is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-3\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Score</mat-label>\\n              <input matInput type=\\\"number\\\" formControlName=\\\"score\\\" placeholder=\\\"Score\\\">\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-1\\\">\\n            <button type=\\\"button\\\" mat-icon-button color=\\\"warn\\\" (click)=\\\"removeOption(i)\\\" [disabled]=\\\"options.length <= 1\\\">\\n              <mat-icon>delete</mat-icon>\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <!-- Conditional Logic -->\\n    <div class=\\\"mt-3\\\">\\n      <h3>\\n        Conditional Logic\\n        <button type=\\\"button\\\" mat-mini-fab color=\\\"primary\\\" class=\\\"ml-2\\\" (click)=\\\"addCondition()\\\" [disabled]=\\\"availableSourceControls.length === 0\\\">\\n          <mat-icon>add</mat-icon>\\n        </button>\\n      </h3>\\n      \\n      <div *ngIf=\\\"availableSourceControls.length === 0\\\" class=\\\"alert alert-info\\\">\\n        No source controls available for conditions. Add other controls to the form first.\\n      </div>\\n      \\n      <div formArrayName=\\\"conditions\\\" *ngIf=\\\"availableSourceControls.length > 0\\\">\\n        <div *ngFor=\\\"let condition of conditions.controls; let i = index\\\" [formGroupName]=\\\"i\\\" class=\\\"row align-items-center mb-2\\\">\\n          <div class=\\\"col-md-3\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Source Control</mat-label>\\n              <mat-select formControlName=\\\"sourceControlId\\\">\\n                <mat-option *ngFor=\\\"let control of availableSourceControls\\\" [value]=\\\"control.id\\\">\\n                  {{ control.label }}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error *ngIf=\\\"condition.get('sourceControlId')?.hasError('required')\\\">Source control is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-2\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Operator</mat-label>\\n              <mat-select formControlName=\\\"operator\\\">\\n                <mat-option *ngFor=\\\"let op of conditionOperators\\\" [value]=\\\"op.value\\\">\\n                  {{ op.label }}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error *ngIf=\\\"condition.get('operator')?.hasError('required')\\\">Operator is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-2\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Value</mat-label>\\n              <input matInput formControlName=\\\"value\\\" placeholder=\\\"Condition value\\\">\\n              <mat-error *ngIf=\\\"condition.get('value')?.hasError('required')\\\">Value is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-2\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Action</mat-label>\\n              <mat-select formControlName=\\\"action\\\">\\n                <mat-option *ngFor=\\\"let action of conditionActions\\\" [value]=\\\"action.value\\\">\\n                  {{ action.label }}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error *ngIf=\\\"condition.get('action')?.hasError('required')\\\">Action is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-1\\\">\\n            <button type=\\\"button\\\" mat-icon-button color=\\\"warn\\\" (click)=\\\"removeCondition(i)\\\">\\n              <mat-icon>delete</mat-icon>\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </mat-dialog-content>\\n\\n  <mat-dialog-actions align=\\\"end\\\">\\n    <button mat-button (click)=\\\"onCancel()\\\">Cancel</button>\\n    <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"form.invalid\\\">\\n      {{ data.control ? 'Update' : 'Add' }}\\n    </button>\\n  </mat-dialog-actions>\\n</form>\\n\",\n      dependencies: [{\n        kind: \"directive\",\n        type: i3.NgForOf,\n        selector: \"[ngFor][ngForOf]\",\n        inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"]\n      }, {\n        kind: \"directive\",\n        type: i3.NgIf,\n        selector: \"[ngIf]\",\n        inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"]\n      }, {\n        kind: \"directive\",\n        type: i1.ɵNgNoValidate,\n        selector: \"form:not([ngNoForm]):not([ngNativeValidate])\"\n      }, {\n        kind: \"directive\",\n        type: i1.DefaultValueAccessor,\n        selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\"\n      }, {\n        kind: \"directive\",\n        type: i1.NumberValueAccessor,\n        selector: \"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]\"\n      }, {\n        kind: \"directive\",\n        type: i1.NgControlStatus,\n        selector: \"[formControlName],[ngModel],[formControl]\"\n      }, {\n        kind: \"directive\",\n        type: i1.NgControlStatusGroup,\n        selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\"\n      }, {\n        kind: \"directive\",\n        type: i1.FormGroupDirective,\n        selector: \"[formGroup]\",\n        inputs: [\"formGroup\"],\n        outputs: [\"ngSubmit\"],\n        exportAs: [\"ngForm\"]\n      }, {\n        kind: \"directive\",\n        type: i1.FormControlName,\n        selector: \"[formControlName]\",\n        inputs: [\"formControlName\", \"disabled\", \"ngModel\"],\n        outputs: [\"ngModelChange\"]\n      }, {\n        kind: \"directive\",\n        type: i1.FormGroupName,\n        selector: \"[formGroupName]\",\n        inputs: [\"formGroupName\"]\n      }, {\n        kind: \"directive\",\n        type: i1.FormArrayName,\n        selector: \"[formArrayName]\",\n        inputs: [\"formArrayName\"]\n      }, {\n        kind: \"component\",\n        type: i4.MatButton,\n        selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \",\n        exportAs: [\"matButton\"]\n      }, {\n        kind: \"component\",\n        type: i4.MatIconButton,\n        selector: \"button[mat-icon-button]\",\n        exportAs: [\"matButton\"]\n      }, {\n        kind: \"component\",\n        type: i4.MatMiniFabButton,\n        selector: \"button[mat-mini-fab]\",\n        exportAs: [\"matButton\"]\n      }, {\n        kind: \"component\",\n        type: i5.MatCheckbox,\n        selector: \"mat-checkbox\",\n        inputs: [\"aria-label\", \"aria-labelledby\", \"aria-describedby\", \"aria-expanded\", \"aria-controls\", \"aria-owns\", \"id\", \"required\", \"labelPosition\", \"name\", \"value\", \"disableRipple\", \"tabIndex\", \"color\", \"disabledInteractive\", \"checked\", \"disabled\", \"indeterminate\"],\n        outputs: [\"change\", \"indeterminateChange\"],\n        exportAs: [\"matCheckbox\"]\n      }, {\n        kind: \"directive\",\n        type: i2.MatDialogTitle,\n        selector: \"[mat-dialog-title], [matDialogTitle]\",\n        inputs: [\"id\"],\n        exportAs: [\"matDialogTitle\"]\n      }, {\n        kind: \"directive\",\n        type: i2.MatDialogActions,\n        selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\",\n        inputs: [\"align\"]\n      }, {\n        kind: \"directive\",\n        type: i2.MatDialogContent,\n        selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\"\n      }, {\n        kind: \"component\",\n        type: i6.MatFormField,\n        selector: \"mat-form-field\",\n        inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"],\n        exportAs: [\"matFormField\"]\n      }, {\n        kind: \"directive\",\n        type: i6.MatLabel,\n        selector: \"mat-label\"\n      }, {\n        kind: \"directive\",\n        type: i6.MatError,\n        selector: \"mat-error, [matError]\",\n        inputs: [\"id\"]\n      }, {\n        kind: \"component\",\n        type: i7.MatIcon,\n        selector: \"mat-icon\",\n        inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"],\n        exportAs: [\"matIcon\"]\n      }, {\n        kind: \"directive\",\n        type: i8.MatInput,\n        selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\",\n        inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\", \"disabledInteractive\"],\n        exportAs: [\"matInput\"]\n      }, {\n        kind: \"component\",\n        type: i9.MatSelect,\n        selector: \"mat-select\",\n        inputs: [\"aria-describedby\", \"panelClass\", \"disabled\", \"disableRipple\", \"tabIndex\", \"hideSingleSelectionIndicator\", \"placeholder\", \"required\", \"multiple\", \"disableOptionCentering\", \"compareWith\", \"value\", \"aria-label\", \"aria-labelledby\", \"errorStateMatcher\", \"typeaheadDebounceInterval\", \"sortComparator\", \"id\", \"panelWidth\", \"canSelectNullableOptions\"],\n        outputs: [\"openedChange\", \"opened\", \"closed\", \"selectionChange\", \"valueChange\"],\n        exportAs: [\"matSelect\"]\n      }, {\n        kind: \"component\",\n        type: i9.MatOption,\n        selector: \"mat-option\",\n        inputs: [\"value\", \"id\", \"disabled\"],\n        outputs: [\"onSelectionChange\"],\n        exportAs: [\"matOption\"]\n      }]\n    });\n  }\n  return ControlConfigComponent;\n})();\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.5\",\n  ngImport: i0,\n  type: ControlConfigComponent,\n  decorators: [{\n    type: Component,\n    args: [{\n      selector: 'app-control-config',\n      standalone: false,\n      template: \"<h2 mat-dialog-title>{{ data.control ? 'Edit Control' : 'Add New Control' }}</h2>\\n\\n<form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  <mat-dialog-content class=\\\"mat-typography\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-8\\\">\\n        <mat-form-field class=\\\"w-100\\\">\\n          <mat-label>Label</mat-label>\\n          <input matInput formControlName=\\\"label\\\" placeholder=\\\"Enter control label\\\">\\n          <mat-error *ngIf=\\\"form.get('label')?.hasError('required')\\\">Label is required</mat-error>\\n        </mat-form-field>\\n      </div>\\n\\n      <div class=\\\"col-md-4\\\">\\n        <mat-form-field class=\\\"w-100\\\">\\n          <mat-label>Control Type</mat-label>\\n          <mat-select formControlName=\\\"type\\\" [disabled]=\\\"!!data.control\\\">\\n            <mat-option value=\\\"Text\\\">Text Field</mat-option>\\n            <mat-option value=\\\"Textarea\\\">Textarea</mat-option>\\n            <mat-option value=\\\"RadioGroup\\\">Radio Group</mat-option>\\n            <mat-option value=\\\"CheckboxGroup\\\">Checkbox Group</mat-option>\\n            <mat-option value=\\\"Dropdown\\\">Dropdown</mat-option>\\n            <mat-option value=\\\"FileUpload\\\">File Upload</mat-option>\\n            <mat-option value=\\\"Signature\\\">Signature</mat-option>\\n            <mat-option value=\\\"LocationPicker\\\">Location Picker</mat-option>\\n            <mat-option value=\\\"Note\\\">Note/Information</mat-option>\\n          </mat-select>\\n        </mat-form-field>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <mat-checkbox formControlName=\\\"isRequired\\\" *ngIf=\\\"controlType !== 'Note'\\\">Required</mat-checkbox>\\n      </div>\\n    </div>\\n\\n    <!-- Configuration based on control type -->\\n    <div formGroupName=\\\"configuration\\\" class=\\\"mt-3\\\">\\n      <h3>Control Configuration</h3>\\n\\n      <!-- Text Configuration -->\\n      <div *ngIf=\\\"controlType === 'Text'\\\" class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"w-100\\\">\\n            <mat-label>Input Type</mat-label>\\n            <mat-select formControlName=\\\"inputType\\\">\\n              <mat-option *ngFor=\\\"let type of inputTypes\\\" [value]=\\\"type.value\\\">\\n                {{ type.label }}\\n              </mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n        \\n        <div class=\\\"col-md-6\\\" *ngIf=\\\"form.get('configuration.inputType')?.value === 'Number'\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6\\\">\\n              <mat-form-field class=\\\"w-100\\\">\\n                <mat-label>Min Value</mat-label>\\n                <input matInput type=\\\"number\\\" formControlName=\\\"minValue\\\">\\n              </mat-form-field>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n              <mat-form-field class=\\\"w-100\\\">\\n                <mat-label>Max Value</mat-label>\\n                <input matInput type=\\\"number\\\" formControlName=\\\"maxValue\\\">\\n              </mat-form-field>\\n            </div>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"col-md-6\\\" *ngIf=\\\"form.get('configuration.inputType')?.value === 'Phone'\\\">\\n          <mat-checkbox formControlName=\\\"enableCountryCode\\\">Enable Country Code Selector</mat-checkbox>\\n        </div>\\n      </div>\\n\\n      <!-- Textarea Configuration -->\\n      <div *ngIf=\\\"controlType === 'Textarea'\\\" class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"w-100\\\">\\n            <mat-label>Max Length</mat-label>\\n            <input matInput type=\\\"number\\\" formControlName=\\\"maxLength\\\">\\n          </mat-form-field>\\n        </div>\\n      </div>\\n\\n      <!-- Radio/Checkbox/Dropdown Configuration -->\\n      <div *ngIf=\\\"['RadioGroup', 'CheckboxGroup', 'Dropdown'].includes(controlType)\\\" class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"w-100\\\">\\n            <mat-label>Selection Type</mat-label>\\n            <mat-select formControlName=\\\"selectionType\\\">\\n              <mat-option *ngFor=\\\"let type of selectionTypes\\\" [value]=\\\"type.value\\\">\\n                {{ type.label }}\\n              </mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n        \\n        <div class=\\\"col-md-6\\\" *ngIf=\\\"controlType === 'Dropdown'\\\">\\n          <mat-checkbox formControlName=\\\"searchable\\\">Searchable</mat-checkbox>\\n        </div>\\n      </div>\\n\\n      <!-- File Upload Configuration -->\\n      <div *ngIf=\\\"controlType === 'FileUpload'\\\" class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"w-100\\\">\\n            <mat-label>Selection Type</mat-label>\\n            <mat-select formControlName=\\\"selectionType\\\">\\n              <mat-option *ngFor=\\\"let type of selectionTypes\\\" [value]=\\\"type.value\\\">\\n                {{ type.label }}\\n              </mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n        \\n        <div class=\\\"col-md-12\\\">\\n          <mat-form-field class=\\\"w-100\\\">\\n            <mat-label>Accepted File Types</mat-label>\\n            <mat-select formControlName=\\\"acceptedFileTypes\\\" multiple>\\n              <mat-option *ngFor=\\\"let type of acceptedFileTypes\\\" [value]=\\\"type.value\\\">\\n                {{ type.label }}\\n              </mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n      </div>\\n\\n      <!-- Location Picker Configuration -->\\n      <div *ngIf=\\\"controlType === 'LocationPicker'\\\" class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-checkbox formControlName=\\\"showMap\\\">Show Map</mat-checkbox>\\n        </div>\\n      </div>\\n\\n      <!-- Note Configuration -->\\n      <div *ngIf=\\\"controlType === 'Note'\\\" class=\\\"row\\\">\\n        <div class=\\\"col-md-12\\\">\\n          <mat-form-field class=\\\"w-100\\\">\\n            <mat-label>Note Text</mat-label>\\n            <textarea matInput formControlName=\\\"noteText\\\" rows=\\\"4\\\"></textarea>\\n          </mat-form-field>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <!-- Options Configuration -->\\n    <div *ngIf=\\\"['RadioGroup', 'CheckboxGroup', 'Dropdown'].includes(controlType)\\\" class=\\\"mt-3\\\">\\n      <h3>\\n        Options\\n        <button type=\\\"button\\\" mat-mini-fab color=\\\"primary\\\" class=\\\"ml-2\\\" (click)=\\\"addOption()\\\">\\n          <mat-icon>add</mat-icon>\\n        </button>\\n      </h3>\\n      \\n      <div formArrayName=\\\"options\\\">\\n        <div *ngFor=\\\"let option of options.controls; let i = index\\\" [formGroupName]=\\\"i\\\" class=\\\"row align-items-center mb-2\\\">\\n          <div class=\\\"col-md-4\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Value</mat-label>\\n              <input matInput formControlName=\\\"value\\\" placeholder=\\\"Option value\\\">\\n              <mat-error *ngIf=\\\"option.get('value')?.hasError('required')\\\">Value is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-4\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Text</mat-label>\\n              <input matInput formControlName=\\\"text\\\" placeholder=\\\"Option text\\\">\\n              <mat-error *ngIf=\\\"option.get('text')?.hasError('required')\\\">Text is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-3\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Score</mat-label>\\n              <input matInput type=\\\"number\\\" formControlName=\\\"score\\\" placeholder=\\\"Score\\\">\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-1\\\">\\n            <button type=\\\"button\\\" mat-icon-button color=\\\"warn\\\" (click)=\\\"removeOption(i)\\\" [disabled]=\\\"options.length <= 1\\\">\\n              <mat-icon>delete</mat-icon>\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <!-- Conditional Logic -->\\n    <div class=\\\"mt-3\\\">\\n      <h3>\\n        Conditional Logic\\n        <button type=\\\"button\\\" mat-mini-fab color=\\\"primary\\\" class=\\\"ml-2\\\" (click)=\\\"addCondition()\\\" [disabled]=\\\"availableSourceControls.length === 0\\\">\\n          <mat-icon>add</mat-icon>\\n        </button>\\n      </h3>\\n      \\n      <div *ngIf=\\\"availableSourceControls.length === 0\\\" class=\\\"alert alert-info\\\">\\n        No source controls available for conditions. Add other controls to the form first.\\n      </div>\\n      \\n      <div formArrayName=\\\"conditions\\\" *ngIf=\\\"availableSourceControls.length > 0\\\">\\n        <div *ngFor=\\\"let condition of conditions.controls; let i = index\\\" [formGroupName]=\\\"i\\\" class=\\\"row align-items-center mb-2\\\">\\n          <div class=\\\"col-md-3\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Source Control</mat-label>\\n              <mat-select formControlName=\\\"sourceControlId\\\">\\n                <mat-option *ngFor=\\\"let control of availableSourceControls\\\" [value]=\\\"control.id\\\">\\n                  {{ control.label }}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error *ngIf=\\\"condition.get('sourceControlId')?.hasError('required')\\\">Source control is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-2\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Operator</mat-label>\\n              <mat-select formControlName=\\\"operator\\\">\\n                <mat-option *ngFor=\\\"let op of conditionOperators\\\" [value]=\\\"op.value\\\">\\n                  {{ op.label }}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error *ngIf=\\\"condition.get('operator')?.hasError('required')\\\">Operator is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-2\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Value</mat-label>\\n              <input matInput formControlName=\\\"value\\\" placeholder=\\\"Condition value\\\">\\n              <mat-error *ngIf=\\\"condition.get('value')?.hasError('required')\\\">Value is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-2\\\">\\n            <mat-form-field class=\\\"w-100\\\">\\n              <mat-label>Action</mat-label>\\n              <mat-select formControlName=\\\"action\\\">\\n                <mat-option *ngFor=\\\"let action of conditionActions\\\" [value]=\\\"action.value\\\">\\n                  {{ action.label }}\\n                </mat-option>\\n              </mat-select>\\n              <mat-error *ngIf=\\\"condition.get('action')?.hasError('required')\\\">Action is required</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-1\\\">\\n            <button type=\\\"button\\\" mat-icon-button color=\\\"warn\\\" (click)=\\\"removeCondition(i)\\\">\\n              <mat-icon>delete</mat-icon>\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </mat-dialog-content>\\n\\n  <mat-dialog-actions align=\\\"end\\\">\\n    <button mat-button (click)=\\\"onCancel()\\\">Cancel</button>\\n    <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"form.invalid\\\">\\n      {{ data.control ? 'Update' : 'Add' }}\\n    </button>\\n  </mat-dialog-actions>\\n</form>\\n\"\n    }]\n  }],\n  ctorParameters: () => [{\n    type: i1.FormBuilder\n  }, {\n    type: i2.MatDialogRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_DIALOG_DATA]\n    }]\n  }]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}