{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { ControlConfigComponent } from './control-config/control-config.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../shared/services/form.service\";\nimport * as i4 from \"../../shared/services/control.service\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"@angular/material/snack-bar\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/cdk/drag-drop\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/card\";\nimport * as i11 from \"@angular/material/checkbox\";\nimport * as i12 from \"@angular/material/form-field\";\nimport * as i13 from \"@angular/material/icon\";\nimport * as i14 from \"@angular/material/input\";\nimport * as i15 from \"@angular/material/progress-spinner\";\nfunction FormBuilderComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"div\", 19)(2, \"mat-icon\", 20);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const control_r2 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r2.getControlIcon(control_r2.type));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(control_r2.type);\n  }\n}\nfunction FormBuilderComponent_div_36_div_1_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function FormBuilderComponent_div_36_div_1_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const sectionIndex_r7 = i0.ɵɵnextContext().index;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.deleteSection(sectionIndex_r7));\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"delete\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction FormBuilderComponent_div_36_div_1_mat_card_subtitle_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card-subtitle\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const section_r8 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(section_r8.description);\n  }\n}\nfunction FormBuilderComponent_div_36_div_1_div_10_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 33);\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormBuilderComponent_div_36_div_1_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"div\", 25)(2, \"div\")(3, \"strong\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 30);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, FormBuilderComponent_div_36_div_1_div_10_span_7_Template, 2, 0, \"span\", 31);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\")(9, \"button\", 32);\n    i0.ɵɵlistener(\"click\", function FormBuilderComponent_div_36_div_1_div_10_Template_button_click_9_listener() {\n      const control_r10 = i0.ɵɵrestoreView(_r9).$implicit;\n      const sectionIndex_r7 = i0.ɵɵnextContext().index;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.editControl(control_r10, sectionIndex_r7));\n    });\n    i0.ɵɵelementStart(10, \"mat-icon\");\n    i0.ɵɵtext(11, \"edit\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function FormBuilderComponent_div_36_div_1_div_10_Template_button_click_12_listener() {\n      const controlIndex_r11 = i0.ɵɵrestoreView(_r9).index;\n      const sectionIndex_r7 = i0.ɵɵnextContext().index;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.deleteControl(controlIndex_r11, sectionIndex_r7));\n    });\n    i0.ɵɵelementStart(13, \"mat-icon\");\n    i0.ɵɵtext(14, \"delete\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const control_r10 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(control_r10.label);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(control_r10.type);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", control_r10.isRequired);\n  }\n}\nfunction FormBuilderComponent_div_36_div_1_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34)(1, \"p\", 35);\n    i0.ɵɵtext(2, \"Drag and drop controls here\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction FormBuilderComponent_div_36_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 24)(1, \"mat-card\")(2, \"mat-card-header\")(3, \"mat-card-title\", 25)(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, FormBuilderComponent_div_36_div_1_button_6_Template, 3, 0, \"button\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, FormBuilderComponent_div_36_div_1_mat_card_subtitle_7_Template, 2, 1, \"mat-card-subtitle\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"mat-card-content\")(9, \"div\", 27);\n    i0.ɵɵlistener(\"cdkDropListDropped\", function FormBuilderComponent_div_36_div_1_Template_div_cdkDropListDropped_9_listener($event) {\n      const sectionIndex_r7 = i0.ɵɵrestoreView(_r5).index;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.dropControl($event, sectionIndex_r7));\n    });\n    i0.ɵɵtemplate(10, FormBuilderComponent_div_36_div_1_div_10_Template, 15, 3, \"div\", 14)(11, FormBuilderComponent_div_36_div_1_div_11_Template, 3, 0, \"div\", 28);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const section_r8 = ctx.$implicit;\n    const sectionIndex_r7 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(section_r8.title);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.form.sections.length > 1);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", section_r8.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"section-\", sectionIndex_r7, \"\");\n    i0.ɵɵproperty(\"cdkDropListData\", section_r8.controls)(\"cdkDropListConnectedTo\", ctx_r2.getSectionConnections());\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", section_r8.controls);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", section_r8.controls.length === 0);\n  }\n}\nfunction FormBuilderComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, FormBuilderComponent_div_36_div_1_Template, 12, 9, \"div\", 21);\n    i0.ɵɵelementStart(2, \"div\", 22)(3, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function FormBuilderComponent_div_36_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.addSection());\n    });\n    i0.ɵɵelementStart(4, \"mat-icon\");\n    i0.ɵɵtext(5, \"add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \" Add Section \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.form.sections);\n  }\n}\nfunction FormBuilderComponent_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵelement(1, \"mat-spinner\", 37);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormBuilderComponent_ng_template_38_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Title is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormBuilderComponent_ng_template_38_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"h2\", 38);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"mat-dialog-content\")(3, \"form\", 39)(4, \"mat-form-field\", 40)(5, \"mat-label\");\n    i0.ɵɵtext(6, \"Section Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 41);\n    i0.ɵɵtemplate(8, FormBuilderComponent_ng_template_38_mat_error_8_Template, 2, 0, \"mat-error\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"mat-form-field\", 8)(10, \"mat-label\");\n    i0.ɵɵtext(11, \"Section Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"textarea\", 42);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(13, \"mat-dialog-actions\", 43)(14, \"button\", 44);\n    i0.ɵɵtext(15, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"button\", 45);\n    i0.ɵɵlistener(\"click\", function FormBuilderComponent_ng_template_38_Template_button_click_16_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.saveSectionDialog());\n    });\n    i0.ɵɵtext(17, \"Save\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    let tmp_4_0;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r2.isNewSection ? \"Add Section\" : \"Edit Section\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.sectionForm);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", (tmp_4_0 = ctx_r2.sectionForm.get(\"title\")) == null ? null : tmp_4_0.hasError(\"required\"));\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.sectionForm.invalid);\n  }\n}\nexport class FormBuilderComponent {\n  route;\n  router;\n  fb;\n  formService;\n  controlService;\n  dialog;\n  snackBar;\n  formId = null;\n  form = null;\n  formGroup;\n  loading = false;\n  availableControls = [{\n    type: 'Text',\n    label: 'Text Field',\n    icon: 'text_fields',\n    id: 'text-control'\n  }, {\n    type: 'Textarea',\n    label: 'Text Area',\n    icon: 'notes',\n    id: 'textarea-control'\n  }, {\n    type: 'RadioGroup',\n    label: 'Radio Group',\n    icon: 'radio_button_checked',\n    id: 'radio-control'\n  }, {\n    type: 'CheckboxGroup',\n    label: 'Checkbox Group',\n    icon: 'check_box',\n    id: 'checkbox-control'\n  }, {\n    type: 'Dropdown',\n    label: 'Dropdown',\n    icon: 'arrow_drop_down_circle',\n    id: 'dropdown-control'\n  }, {\n    type: 'FileUpload',\n    label: 'File Upload',\n    icon: 'cloud_upload',\n    id: 'file-control'\n  }, {\n    type: 'Signature',\n    label: 'Signature',\n    icon: 'draw',\n    id: 'signature-control'\n  }, {\n    type: 'LocationPicker',\n    label: 'Location Picker',\n    icon: 'location_on',\n    id: 'location-control'\n  }, {\n    type: 'Note',\n    label: 'Note',\n    icon: 'info',\n    id: 'note-control'\n  }];\n  isNewSection = false;\n  sectionForm;\n  constructor(route, router, fb, formService, controlService, dialog, snackBar) {\n    this.route = route;\n    this.router = router;\n    this.fb = fb;\n    this.formService = formService;\n    this.controlService = controlService;\n    this.dialog = dialog;\n    this.snackBar = snackBar;\n    this.formGroup = this.fb.group({\n      title: ['', Validators.required],\n      description: ['']\n    });\n    this.sectionForm = this.fb.group({\n      title: ['', Validators.required],\n      description: ['']\n    });\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      const idParam = params.get('id');\n      if (idParam) {\n        this.formId = +idParam;\n        this.loadForm(this.formId);\n      } else {\n        this.initNewForm();\n      }\n    });\n  }\n  loadForm(id) {\n    this.loading = true;\n    this.formService.getForm(id).subscribe({\n      next: form => {\n        this.form = form;\n        this.formGroup.patchValue({\n          title: form.title,\n          description: form.description\n        });\n        this.loading = false;\n      },\n      error: err => {\n        this.snackBar.open('Error loading form: ' + err.message, 'Close', {\n          duration: 3000\n        });\n        this.loading = false;\n      }\n    });\n  }\n  initNewForm() {\n    this.form = {\n      id: 0,\n      title: '',\n      description: '',\n      createdBy: 'current-user',\n      // In a real app, get from auth service\n      createdDate: new Date(),\n      modifiedDate: new Date(),\n      isPublished: false,\n      sections: [{\n        id: 0,\n        formId: 0,\n        title: 'Section 1',\n        description: '',\n        orderIndex: 0,\n        controls: []\n      }]\n    };\n  }\n  saveForm() {\n    if (this.formGroup.invalid) {\n      this.snackBar.open('Please fill in all required fields', 'Close', {\n        duration: 3000\n      });\n      return;\n    }\n    const formData = {\n      ...this.form,\n      title: this.formGroup.value.title,\n      description: this.formGroup.value.description,\n      modifiedDate: new Date()\n    };\n    this.loading = true;\n    if (this.formId) {\n      this.formService.updateForm(formData).subscribe({\n        next: response => {\n          this.form = response;\n          this.snackBar.open('Form updated successfully', 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error updating form: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    } else {\n      this.formService.createForm(formData).subscribe({\n        next: response => {\n          this.form = response;\n          this.formId = response.id;\n          this.router.navigate(['/forms', this.formId]);\n          this.snackBar.open('Form created successfully', 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error creating form: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    }\n  }\n  publishForm() {\n    if (!this.formId) {\n      this.snackBar.open('Please save the form before publishing', 'Close', {\n        duration: 3000\n      });\n      return;\n    }\n    this.loading = true;\n    this.formService.publishForm(this.formId).subscribe({\n      next: response => {\n        this.form = response;\n        this.snackBar.open('Form published successfully', 'Close', {\n          duration: 3000\n        });\n        this.loading = false;\n      },\n      error: err => {\n        this.snackBar.open('Error publishing form: ' + err.message, 'Close', {\n          duration: 3000\n        });\n        this.loading = false;\n      }\n    });\n  }\n  addSection() {\n    if (!this.form) return;\n    const newSection = {\n      id: 0,\n      // Will be set by the backend\n      formId: this.form.id,\n      title: `Section ${this.form.sections.length + 1}`,\n      description: '',\n      orderIndex: this.form.sections.length,\n      controls: []\n    };\n    this.form.sections.push(newSection);\n  }\n  deleteSection(index) {\n    if (!this.form) return;\n    this.form.sections.splice(index, 1);\n    // Update the orderIndex for the remaining sections\n    this.form.sections.forEach((section, idx) => {\n      section.orderIndex = idx;\n    });\n  }\n  getSectionIds() {\n    if (!this.form) return [];\n    return this.form.sections.map((_, index) => `section-${index}`);\n  }\n  dropControl(event, sectionIndex) {\n    if (!this.form) return;\n    if (event.previousContainer === event.container) {\n      // Reordering within the same section\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n      // Update the orderIndex for the controls\n      event.container.data.forEach((control, idx) => {\n        control.orderIndex = idx;\n      });\n      if (this.formId) {\n        this.controlService.updateControlOrder(this.form.sections[sectionIndex].id, event.container.data.map(control => control.id)).subscribe();\n      }\n    } else if (event.previousContainer.id === 'available-controls') {\n      // Dragging from available controls to a section\n      const controlType = this.availableControls[event.previousIndex].type;\n      // Open configuration dialog\n      this.openControlConfig(null, controlType, sectionIndex, event.currentIndex);\n    } else {\n      // Moving control between different sections\n      const previousSectionIndex = parseInt(event.previousContainer.id.split('-')[1]);\n      const control = event.previousContainer.data[event.previousIndex];\n      // Remove from previous section\n      this.form.sections[previousSectionIndex].controls.splice(event.previousIndex, 1);\n      // Add to new section\n      control.sectionId = this.form.sections[sectionIndex].id;\n      this.form.sections[sectionIndex].controls.splice(event.currentIndex, 0, control);\n      // Update orderIndex in both sections\n      this.form.sections[previousSectionIndex].controls.forEach((c, idx) => {\n        c.orderIndex = idx;\n      });\n      this.form.sections[sectionIndex].controls.forEach((c, idx) => {\n        c.orderIndex = idx;\n      });\n      // API update would go here in production\n      this.snackBar.open('Control moved to new section', 'Close', {\n        duration: 2000\n      });\n    }\n  }\n  openControlConfig(control, type, sectionIndex, orderIndex) {\n    const dialogRef = this.dialog.open(ControlConfigComponent, {\n      width: '600px',\n      data: {\n        control,\n        type,\n        sectionId: this.form?.sections[sectionIndex].id,\n        availableControls: this.form?.sections.flatMap(s => s.controls) || []\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (control) {\n          // Update existing control\n          const sectionControls = this.form?.sections[sectionIndex].controls || [];\n          const controlIndex = sectionControls.findIndex(c => c.id === control.id);\n          if (controlIndex !== -1 && this.form) {\n            this.form.sections[sectionIndex].controls[controlIndex] = result;\n          }\n        } else {\n          // Add new control\n          const newControl = {\n            ...result,\n            orderIndex,\n            sectionId: this.form?.sections[sectionIndex].id || 0\n          };\n          if (this.form) {\n            this.form.sections[sectionIndex].controls.splice(orderIndex, 0, newControl);\n            // Update the orderIndex for the controls\n            this.form.sections[sectionIndex].controls.forEach((control, idx) => {\n              control.orderIndex = idx;\n            });\n          }\n        }\n      }\n    });\n  }\n  editControl(control, sectionIndex) {\n    this.openControlConfig(control, null, sectionIndex, control.orderIndex);\n  }\n  deleteControl(controlIndex, sectionIndex) {\n    if (!this.form) return;\n    const control = this.form.sections[sectionIndex].controls[controlIndex];\n    if (control.id && this.formId) {\n      this.controlService.deleteControl(control.id).subscribe({\n        next: () => {\n          this.form?.sections[sectionIndex].controls.splice(controlIndex, 1);\n          // Update the orderIndex for the remaining controls\n          this.form?.sections[sectionIndex].controls.forEach((c, idx) => {\n            c.orderIndex = idx;\n          });\n          this.snackBar.open('Control deleted successfully', 'Close', {\n            duration: 3000\n          });\n        },\n        error: err => {\n          this.snackBar.open('Error deleting control: ' + err.message, 'Close', {\n            duration: 3000\n          });\n        }\n      });\n    } else {\n      this.form.sections[sectionIndex].controls.splice(controlIndex, 1);\n      // Update the orderIndex for the remaining controls\n      this.form.sections[sectionIndex].controls.forEach((c, idx) => {\n        c.orderIndex = idx;\n      });\n    }\n  }\n  previewForm() {\n    if (this.formId) {\n      this.router.navigate(['/forms', this.formId, 'preview']);\n    } else {\n      this.snackBar.open('Please save the form before previewing', 'Close', {\n        duration: 3000\n      });\n    }\n  }\n  getControlIcon(type) {\n    const control = this.availableControls.find(c => c.type === type);\n    return control ? control.icon : 'help_outline';\n  }\n  saveSectionDialog() {\n    if (this.sectionForm.invalid) {\n      return;\n    }\n    // Dialog data would be handled here\n    // This is a placeholder for the actual implementation\n    this.snackBar.open('Section saved successfully', 'Close', {\n      duration: 3000\n    });\n  }\n  static ɵfac = function FormBuilderComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FormBuilderComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.FormService), i0.ɵɵdirectiveInject(i4.ControlService), i0.ɵɵdirectiveInject(i5.MatDialog), i0.ɵɵdirectiveInject(i6.MatSnackBar));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormBuilderComponent,\n    selectors: [[\"app-form-builder\"]],\n    standalone: false,\n    decls: 40,\n    vars: 8,\n    consts: [[\"editSectionDialog\", \"\"], [1, \"container-fluid\"], [1, \"row\"], [1, \"col-12\"], [1, \"d-flex\", \"justify-content-between\", \"mb-3\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", 3, \"click\", \"disabled\"], [1, \"mb-3\"], [1, \"w-100\"], [\"matInput\", \"\", \"placeholder\", \"Enter form title\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"matInput\", \"\", \"placeholder\", \"Enter form description\", \"rows\", \"2\", 3, \"ngModelChange\", \"ngModel\"], [1, \"mb-3\", 3, \"ngModelChange\", \"ngModel\"], [1, \"col-md-4\"], [\"cdkDropList\", \"\", \"id\", \"available-controls\", 1, \"available-controls-container\", 3, \"cdkDropListData\"], [\"class\", \"control-box\", \"cdkDrag\", \"\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-8\"], [4, \"ngIf\"], [\"class\", \"text-center\", 4, \"ngIf\"], [\"cdkDrag\", \"\", 1, \"control-box\"], [1, \"d-flex\", \"align-items-center\"], [1, \"mr-2\"], [\"class\", \"mb-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"text-center\", \"mt-3\"], [\"mat-raised-button\", \"\", \"color\", \"basic\", 3, \"click\"], [1, \"mb-4\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [\"mat-icon-button\", \"\", \"color\", \"warn\", 3, \"click\", 4, \"ngIf\"], [\"cdkDropList\", \"\", 1, \"form-controls-container\", 3, \"cdkDropListDropped\", \"id\", \"cdkDropListData\", \"cdkDropListConnectedTo\"], [\"class\", \"empty-section\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"color\", \"warn\", 3, \"click\"], [1, \"ml-2\", \"control-type-badge\"], [\"class\", \"ml-2 required-badge\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"color\", \"primary\", 3, \"click\"], [1, \"ml-2\", \"required-badge\"], [1, \"empty-section\"], [1, \"text-muted\"], [1, \"text-center\"], [\"diameter\", \"40\"], [\"mat-dialog-title\", \"\"], [3, \"formGroup\"], [1, \"w-100\", \"mb-3\"], [\"matInput\", \"\", \"formControlName\", \"title\", \"placeholder\", \"Enter section title\", \"required\", \"\"], [\"matInput\", \"\", \"formControlName\", \"description\", \"placeholder\", \"Enter section description\", \"rows\", \"3\"], [\"align\", \"end\"], [\"mat-button\", \"\", \"mat-dialog-close\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\", \"disabled\"]],\n    template: function FormBuilderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3)(3, \"h1\");\n        i0.ɵɵtext(4, \"Form Builder\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function FormBuilderComponent_Template_button_click_6_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.saveForm());\n        });\n        i0.ɵɵelementStart(7, \"mat-icon\");\n        i0.ɵɵtext(8, \"save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(9, \" Save Form \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function FormBuilderComponent_Template_button_click_10_listener() {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.previewForm());\n        });\n        i0.ɵɵelementStart(11, \"mat-icon\");\n        i0.ɵɵtext(12, \"preview\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(13, \" Preview Form \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\", 7)(15, \"mat-form-field\", 8)(16, \"mat-label\");\n        i0.ɵɵtext(17, \"Form Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"input\", 9);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function FormBuilderComponent_Template_input_ngModelChange_18_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          i0.ɵɵtwoWayBindingSet(ctx.form.title, $event) || (ctx.form.title = $event);\n          return i0.ɵɵresetView($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(19, \"div\", 7)(20, \"mat-form-field\", 8)(21, \"mat-label\");\n        i0.ɵɵtext(22, \"Form Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"textarea\", 10);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function FormBuilderComponent_Template_textarea_ngModelChange_23_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          i0.ɵɵtwoWayBindingSet(ctx.form.description, $event) || (ctx.form.description = $event);\n          return i0.ɵɵresetView($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(24, \"mat-checkbox\", 11);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function FormBuilderComponent_Template_mat_checkbox_ngModelChange_24_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          i0.ɵɵtwoWayBindingSet(ctx.form.isPublished, $event) || (ctx.form.isPublished = $event);\n          return i0.ɵɵresetView($event);\n        });\n        i0.ɵɵtext(25, \" Published (available for assignments) \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(26, \"div\", 2)(27, \"div\", 12)(28, \"mat-card\")(29, \"mat-card-header\")(30, \"mat-card-title\");\n        i0.ɵɵtext(31, \"Available Controls\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(32, \"mat-card-content\")(33, \"div\", 13);\n        i0.ɵɵtemplate(34, FormBuilderComponent_div_34_Template, 6, 2, \"div\", 14);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(35, \"div\", 15);\n        i0.ɵɵtemplate(36, FormBuilderComponent_div_36_Template, 7, 1, \"div\", 16)(37, FormBuilderComponent_div_37_Template, 2, 0, \"div\", 17);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(38, FormBuilderComponent_ng_template_38_Template, 18, 4, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"disabled\", !ctx.form || ctx.form.sections.length === 0);\n        i0.ɵɵadvance(8);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.form.title);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.form.description);\n        i0.ɵɵadvance();\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.form.isPublished);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.availableControls);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngForOf\", ctx.availableControls);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.form);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    dependencies: [i7.NgForOf, i7.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.FormGroupDirective, i2.FormControlName, i8.CdkDropList, i8.CdkDrag, i9.MatButton, i9.MatIconButton, i10.MatCard, i10.MatCardContent, i10.MatCardHeader, i10.MatCardSubtitle, i10.MatCardTitle, i11.MatCheckbox, i5.MatDialogClose, i5.MatDialogTitle, i5.MatDialogActions, i5.MatDialogContent, i12.MatFormField, i12.MatLabel, i12.MatError, i13.MatIcon, i14.MatInput, i15.MatProgressSpinner],\n    encapsulation: 2\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}