{"ast":null,"code":"import { Component } from '@angular/core';\nimport { Validators, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../../shared/services/form.service\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/checkbox\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/icon\";\nimport * as i11 from \"@angular/material/input\";\nimport * as i12 from \"@angular/material/progress-spinner\";\nimport * as i13 from \"@angular/material/radio\";\nimport * as i14 from \"@angular/material/select\";\nexport let FormPreviewComponent = /*#__PURE__*/(() => {\n  class FormPreviewComponent {\n    route;\n    router;\n    fb;\n    formService;\n    snackBar;\n    formId;\n    form = null;\n    formGroup;\n    loading = false;\n    previewMode = true;\n    // For tracking conditional display\n    controlVisibility = {};\n    controlEnabled = {};\n    constructor(route, router, fb, formService, snackBar) {\n      this.route = route;\n      this.router = router;\n      this.fb = fb;\n      this.formService = formService;\n      this.snackBar = snackBar;\n      this.formId = 0;\n      this.formGroup = this.fb.group({});\n    }\n    ngOnInit() {\n      this.route.paramMap.subscribe(params => {\n        const idParam = params.get('id');\n        if (idParam) {\n          this.formId = +idParam;\n          this.loadForm(this.formId);\n        } else {\n          this.router.navigate(['/forms']);\n        }\n      });\n    }\n    loadForm(id) {\n      this.loading = true;\n      this.formService.getForm(id).subscribe({\n        next: form => {\n          this.form = form;\n          this.initFormControls();\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error loading form: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n          this.router.navigate(['/forms']);\n        }\n      });\n    }\n    initFormControls() {\n      if (!this.form) return;\n      // Create a new form group\n      const formGroup = this.fb.group({});\n      // Initialize control visibility\n      this.controlVisibility = {};\n      this.controlEnabled = {};\n      // Process each section and its controls\n      this.form.sections.forEach(section => {\n        section.controls.forEach(control => {\n          // Skip note controls as they don't have input\n          if (control.type === 'Note') {\n            this.controlVisibility[control.id] = true;\n            this.controlEnabled[control.id] = true;\n            return;\n          }\n          // Create form control based on type\n          let validators = control.isRequired ? [Validators.required] : [];\n          let defaultValue = null;\n          switch (control.type) {\n            case 'Text':\n              defaultValue = '';\n              if (control.configuration.inputType === 'Number') {\n                validators = [...validators, control.configuration.minValue !== null ? Validators.min(control.configuration.minValue) : null, control.configuration.maxValue !== null ? Validators.max(control.configuration.maxValue) : null].filter(Boolean);\n              }\n              break;\n            case 'Textarea':\n              defaultValue = '';\n              if (control.configuration.maxLength) {\n                validators.push(Validators.maxLength(control.configuration.maxLength));\n              }\n              break;\n            case 'RadioGroup':\n              defaultValue = null;\n              break;\n            case 'CheckboxGroup':\n            case 'Dropdown':\n              defaultValue = control.configuration.selectionType === 'Multiple' ? [] : null;\n              break;\n            case 'FileUpload':\n              defaultValue = null;\n              break;\n            case 'Signature':\n              defaultValue = null;\n              break;\n            case 'LocationPicker':\n              defaultValue = null;\n              break;\n          }\n          formGroup.addControl(`control_${control.id}`, new FormControl(defaultValue, validators));\n          // Initialize visibility based on conditions\n          this.controlVisibility[control.id] = this.evaluateControlVisibility(control);\n          this.controlEnabled[control.id] = this.evaluateControlEnabled(control);\n        });\n      });\n      // Register value changes to handle conditional logic\n      formGroup.valueChanges.subscribe(() => {\n        this.evaluateAllConditions();\n      });\n      this.formGroup = formGroup;\n    }\n    evaluateAllConditions() {\n      if (!this.form) return;\n      this.form.sections.forEach(section => {\n        section.controls.forEach(control => {\n          this.controlVisibility[control.id] = this.evaluateControlVisibility(control);\n          this.controlEnabled[control.id] = this.evaluateControlEnabled(control);\n        });\n      });\n    }\n    evaluateControlVisibility(control) {\n      if (!control.conditions || control.conditions.length === 0) {\n        return true;\n      }\n      // Check hide conditions first\n      const hideConditions = control.conditions.filter(c => c.action === 'Hide');\n      for (const condition of hideConditions) {\n        if (this.evaluateCondition(condition)) {\n          return false;\n        }\n      }\n      // Then check show conditions\n      const showConditions = control.conditions.filter(c => c.action === 'Show');\n      if (showConditions.length === 0) {\n        return true;\n      }\n      for (const condition of showConditions) {\n        if (this.evaluateCondition(condition)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    evaluateControlEnabled(control) {\n      if (!control.conditions || control.conditions.length === 0) {\n        return true;\n      }\n      // Check disable conditions first\n      const disableConditions = control.conditions.filter(c => c.action === 'Disable');\n      for (const condition of disableConditions) {\n        if (this.evaluateCondition(condition)) {\n          return false;\n        }\n      }\n      // Then check enable conditions\n      const enableConditions = control.conditions.filter(c => c.action === 'Enable');\n      if (enableConditions.length === 0) {\n        return true;\n      }\n      for (const condition of enableConditions) {\n        if (this.evaluateCondition(condition)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    evaluateCondition(condition) {\n      const sourceControlValue = this.formGroup.get(`control_${condition.sourceControlId}`)?.value;\n      if (sourceControlValue === null || sourceControlValue === undefined) {\n        return false;\n      }\n      switch (condition.operator) {\n        case 'Equals':\n          return sourceControlValue === condition.value;\n        case 'NotEquals':\n          return sourceControlValue !== condition.value;\n        case 'Contains':\n          if (Array.isArray(sourceControlValue)) {\n            return sourceControlValue.includes(condition.value);\n          }\n          return String(sourceControlValue).includes(condition.value);\n        case 'GreaterThan':\n          return Number(sourceControlValue) > Number(condition.value);\n        case 'LessThan':\n          return Number(sourceControlValue) < Number(condition.value);\n        default:\n          return false;\n      }\n    }\n    onSubmit() {\n      if (this.formGroup.invalid) {\n        this.snackBar.open('Please fill in all required fields correctly', 'Close', {\n          duration: 3000\n        });\n        return;\n      }\n      if (!this.form) return;\n      // In preview mode, just show success message\n      if (this.previewMode) {\n        this.snackBar.open('Form is valid! In a real submission, this would be saved.', 'Close', {\n          duration: 3000\n        });\n        return;\n      }\n      // Prepare submission data\n      const formValues = this.formGroup.value;\n      const responses = [];\n      this.form.sections.forEach(section => {\n        section.controls.forEach(control => {\n          // Skip note controls and hidden controls\n          if (control.type === 'Note' || !this.controlVisibility[control.id]) {\n            return;\n          }\n          const controlValue = formValues[`control_${control.id}`];\n          if (controlValue !== null && controlValue !== undefined) {\n            const response = {\n              id: 0,\n              submissionId: 0,\n              controlId: control.id,\n              value: ''\n            };\n            switch (control.type) {\n              case 'CheckboxGroup':\n              case 'Dropdown':\n                if (control.configuration.selectionType === 'Multiple' && Array.isArray(controlValue)) {\n                  response.optionIds = controlValue;\n                  response.value = controlValue.join(',');\n                } else {\n                  response.optionIds = [controlValue];\n                  response.value = controlValue;\n                }\n                break;\n              case 'LocationPicker':\n                // In a real app, we would get lat/long from a map component\n                response.latitude = 0;\n                response.longitude = 0;\n                response.value = '0,0';\n                break;\n              case 'FileUpload':\n                // In a real app, we would have file URLs\n                response.fileUrls = ['example.com/file1.pdf'];\n                response.value = 'example.com/file1.pdf';\n                break;\n              case 'Signature':\n                // In a real app, we would have signature image URL\n                response.signatureUrl = 'example.com/signature.svg';\n                response.value = 'example.com/signature.svg';\n                break;\n              default:\n                response.value = controlValue;\n            }\n            responses.push(response);\n          }\n        });\n      });\n      const submission = {\n        id: 0,\n        formId: this.form.id,\n        submittedBy: 'current-user',\n        // In a real app, get from auth service\n        submittedDate: new Date(),\n        responses\n      };\n      this.loading = true;\n      this.formService.createSubmission(submission).subscribe({\n        next: () => {\n          this.snackBar.open('Form submitted successfully', 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n          this.router.navigate(['/submissions']);\n        },\n        error: err => {\n          this.snackBar.open('Error submitting form: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    }\n    togglePreviewMode() {\n      this.previewMode = !this.previewMode;\n    }\n    backToBuilder() {\n      this.router.navigate(['/forms', this.formId]);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"19.2.5\",\n      ngImport: i0,\n      type: FormPreviewComponent,\n      deps: [{\n        token: i1.ActivatedRoute\n      }, {\n        token: i1.Router\n      }, {\n        token: i2.FormBuilder\n      }, {\n        token: i3.FormService\n      }, {\n        token: i4.MatSnackBar\n      }],\n      target: i0.ɵɵFactoryTarget.Component\n    });\n    static ɵcmp = i0.ɵɵngDeclareComponent({\n      minVersion: \"14.0.0\",\n      version: \"19.2.5\",\n      type: FormPreviewComponent,\n      isStandalone: false,\n      selector: \"app-form-preview\",\n      ngImport: i0,\n      template: \"<div class=\\\"container mt-4\\\">\\n  <div class=\\\"d-flex justify-content-between align-items-center mb-4\\\">\\n    <h1>{{ previewMode ? 'Form Preview' : 'Form Submission' }}</h1>\\n    <div>\\n      <button mat-raised-button color=\\\"basic\\\" (click)=\\\"backToBuilder()\\\">\\n        <mat-icon>arrow_back</mat-icon> Back to Builder\\n      </button>\\n      <button mat-raised-button color=\\\"accent\\\" class=\\\"ml-2\\\" (click)=\\\"togglePreviewMode()\\\">\\n        <mat-icon>{{ previewMode ? 'edit' : 'visibility' }}</mat-icon>\\n        {{ previewMode ? 'Switch to Submission Mode' : 'Switch to Preview Mode' }}\\n      </button>\\n    </div>\\n  </div>\\n\\n  <div *ngIf=\\\"loading\\\" class=\\\"d-flex justify-content-center\\\">\\n    <mat-spinner diameter=\\\"40\\\"></mat-spinner>\\n  </div>\\n\\n  <div *ngIf=\\\"!loading && form\\\">\\n    <div class=\\\"form-header mb-4\\\">\\n      <h2>{{ form.title }}</h2>\\n      <p *ngIf=\\\"form.description\\\">{{ form.description }}</p>\\n    </div>\\n\\n    <form [formGroup]=\\\"formGroup\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n      <div *ngFor=\\\"let section of form.sections\\\" class=\\\"mb-4\\\">\\n        <mat-card>\\n          <mat-card-header>\\n            <mat-card-title>{{ section.title }}</mat-card-title>\\n            <mat-card-subtitle *ngIf=\\\"section.description\\\">{{ section.description }}</mat-card-subtitle>\\n          </mat-card-header>\\n          <mat-card-content>\\n            <div *ngFor=\\\"let control of section.controls\\\" class=\\\"mb-3\\\" \\n                 [hidden]=\\\"!controlVisibility[control.id]\\\">\\n              \\n              <!-- Note Control -->\\n              <div *ngIf=\\\"control.type === 'Note'\\\" class=\\\"note-control\\\">\\n                <div class=\\\"alert alert-info\\\">\\n                  {{ control.configuration.noteText }}\\n                </div>\\n              </div>\\n              \\n              <!-- Text Control -->\\n              <mat-form-field *ngIf=\\\"control.type === 'Text'\\\" class=\\\"w-100\\\">\\n                <mat-label>{{ control.label }}</mat-label>\\n                <input matInput [formControlName]=\\\"'control_' + control.id\\\" \\n                      [type]=\\\"control.configuration.inputType === 'Number' ? 'number' : \\n                              control.configuration.inputType === 'Email' ? 'email' : 'text'\\\"\\n                      [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('required')\\\">\\n                  This field is required\\n                </mat-error>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('min')\\\">\\n                  Value is below minimum allowed ({{ control.configuration.minValue }})\\n                </mat-error>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('max')\\\">\\n                  Value is above maximum allowed ({{ control.configuration.maxValue }})\\n                </mat-error>\\n              </mat-form-field>\\n              \\n              <!-- Textarea Control -->\\n              <mat-form-field *ngIf=\\\"control.type === 'Textarea'\\\" class=\\\"w-100\\\">\\n                <mat-label>{{ control.label }}</mat-label>\\n                <textarea matInput [formControlName]=\\\"'control_' + control.id\\\" rows=\\\"4\\\"\\n                         [disabled]=\\\"!controlEnabled[control.id]\\\"></textarea>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('required')\\\">\\n                  This field is required\\n                </mat-error>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('maxlength')\\\">\\n                  Maximum length exceeded ({{ control.configuration.maxLength }} characters)\\n                </mat-error>\\n              </mat-form-field>\\n              \\n              <!-- Radio Group Control -->\\n              <div *ngIf=\\\"control.type === 'RadioGroup'\\\">\\n                <div class=\\\"form-label\\\">{{ control.label }} <span *ngIf=\\\"control.isRequired\\\" class=\\\"required-marker\\\">*</span></div>\\n                <mat-radio-group [formControlName]=\\\"'control_' + control.id\\\" \\n                                [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                  <mat-radio-button *ngFor=\\\"let option of control.options\\\" \\n                                   [value]=\\\"option.value\\\" class=\\\"d-block mb-2\\\">\\n                    {{ option.text }}\\n                  </mat-radio-button>\\n                </mat-radio-group>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('required') && \\n                                formGroup.get('control_' + control.id)?.touched\\\">\\n                  This field is required\\n                </mat-error>\\n              </div>\\n              \\n              <!-- Checkbox Group Control -->\\n              <div *ngIf=\\\"control.type === 'CheckboxGroup'\\\">\\n                <div class=\\\"form-label\\\">{{ control.label }} <span *ngIf=\\\"control.isRequired\\\" class=\\\"required-marker\\\">*</span></div>\\n                <div *ngFor=\\\"let option of control.options\\\" class=\\\"mb-2\\\">\\n                  <mat-checkbox [value]=\\\"option.value\\\" \\n                               [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                    {{ option.text }}\\n                  </mat-checkbox>\\n                </div>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('required') && \\n                                formGroup.get('control_' + control.id)?.touched\\\">\\n                  This field is required\\n                </mat-error>\\n              </div>\\n              \\n              <!-- Dropdown Control -->\\n              <mat-form-field *ngIf=\\\"control.type === 'Dropdown'\\\" class=\\\"w-100\\\">\\n                <mat-label>{{ control.label }}</mat-label>\\n                <mat-select [formControlName]=\\\"'control_' + control.id\\\" \\n                           [multiple]=\\\"control.configuration.selectionType === 'Multiple'\\\"\\n                           [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                  <mat-option *ngFor=\\\"let option of control.options\\\" [value]=\\\"option.value\\\">\\n                    {{ option.text }}\\n                  </mat-option>\\n                </mat-select>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('required')\\\">\\n                  This field is required\\n                </mat-error>\\n              </mat-form-field>\\n              \\n              <!-- File Upload Control -->\\n              <div *ngIf=\\\"control.type === 'FileUpload'\\\">\\n                <div class=\\\"form-label\\\">{{ control.label }} <span *ngIf=\\\"control.isRequired\\\" class=\\\"required-marker\\\">*</span></div>\\n                <button mat-raised-button color=\\\"basic\\\" type=\\\"button\\\"\\n                       [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                  <mat-icon>cloud_upload</mat-icon> Upload File\\n                </button>\\n                <p class=\\\"text-muted small mt-1\\\">\\n                  Accepted file types: {{ control.configuration.acceptedFileTypes?.join(', ') || 'All files' }}\\n                </p>\\n              </div>\\n              \\n              <!-- Signature Control -->\\n              <div *ngIf=\\\"control.type === 'Signature'\\\">\\n                <div class=\\\"form-label\\\">{{ control.label }} <span *ngIf=\\\"control.isRequired\\\" class=\\\"required-marker\\\">*</span></div>\\n                <div class=\\\"signature-pad mt-2 p-2 border rounded\\\" \\n                     [class.disabled]=\\\"!controlEnabled[control.id]\\\">\\n                  <p class=\\\"text-center text-muted\\\">\\n                    <mat-icon>draw</mat-icon> \\n                    Sign here\\n                  </p>\\n                </div>\\n                <div class=\\\"text-right mt-2\\\">\\n                  <button mat-button type=\\\"button\\\" color=\\\"warn\\\" [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                    Clear Signature\\n                  </button>\\n                </div>\\n              </div>\\n              \\n              <!-- Location Picker Control -->\\n              <div *ngIf=\\\"control.type === 'LocationPicker'\\\">\\n                <div class=\\\"form-label\\\">{{ control.label }} <span *ngIf=\\\"control.isRequired\\\" class=\\\"required-marker\\\">*</span></div>\\n                <button mat-raised-button color=\\\"basic\\\" type=\\\"button\\\"\\n                       [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                  <mat-icon>location_on</mat-icon> Capture Location\\n                </button>\\n                <div *ngIf=\\\"control.configuration.showMap && controlEnabled[control.id]\\\" class=\\\"mt-2\\\">\\n                  <div class=\\\"location-map-placeholder\\\">\\n                    <p class=\\\"text-center text-muted\\\">Map would appear here</p>\\n                  </div>\\n                </div>\\n              </div>\\n              \\n            </div>\\n          </mat-card-content>\\n        </mat-card>\\n      </div>\\n\\n      <div class=\\\"form-actions mt-4 mb-5 text-right\\\">\\n        <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"previewMode && formGroup.invalid\\\">\\n          {{ previewMode ? 'Validate Form' : 'Submit Form' }}\\n        </button>\\n      </div>\\n    </form>\\n  </div>\\n</div>\\n\",\n      dependencies: [{\n        kind: \"directive\",\n        type: i5.NgForOf,\n        selector: \"[ngFor][ngForOf]\",\n        inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"]\n      }, {\n        kind: \"directive\",\n        type: i5.NgIf,\n        selector: \"[ngIf]\",\n        inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"]\n      }, {\n        kind: \"directive\",\n        type: i2.ɵNgNoValidate,\n        selector: \"form:not([ngNoForm]):not([ngNativeValidate])\"\n      }, {\n        kind: \"directive\",\n        type: i2.DefaultValueAccessor,\n        selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\"\n      }, {\n        kind: \"directive\",\n        type: i2.NgControlStatus,\n        selector: \"[formControlName],[ngModel],[formControl]\"\n      }, {\n        kind: \"directive\",\n        type: i2.NgControlStatusGroup,\n        selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\"\n      }, {\n        kind: \"directive\",\n        type: i2.FormGroupDirective,\n        selector: \"[formGroup]\",\n        inputs: [\"formGroup\"],\n        outputs: [\"ngSubmit\"],\n        exportAs: [\"ngForm\"]\n      }, {\n        kind: \"directive\",\n        type: i2.FormControlName,\n        selector: \"[formControlName]\",\n        inputs: [\"formControlName\", \"disabled\", \"ngModel\"],\n        outputs: [\"ngModelChange\"]\n      }, {\n        kind: \"component\",\n        type: i6.MatButton,\n        selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \",\n        exportAs: [\"matButton\"]\n      }, {\n        kind: \"component\",\n        type: i7.MatCard,\n        selector: \"mat-card\",\n        inputs: [\"appearance\"],\n        exportAs: [\"matCard\"]\n      }, {\n        kind: \"directive\",\n        type: i7.MatCardContent,\n        selector: \"mat-card-content\"\n      }, {\n        kind: \"component\",\n        type: i7.MatCardHeader,\n        selector: \"mat-card-header\"\n      }, {\n        kind: \"directive\",\n        type: i7.MatCardSubtitle,\n        selector: \"mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]\"\n      }, {\n        kind: \"directive\",\n        type: i7.MatCardTitle,\n        selector: \"mat-card-title, [mat-card-title], [matCardTitle]\"\n      }, {\n        kind: \"component\",\n        type: i8.MatCheckbox,\n        selector: \"mat-checkbox\",\n        inputs: [\"aria-label\", \"aria-labelledby\", \"aria-describedby\", \"aria-expanded\", \"aria-controls\", \"aria-owns\", \"id\", \"required\", \"labelPosition\", \"name\", \"value\", \"disableRipple\", \"tabIndex\", \"color\", \"disabledInteractive\", \"checked\", \"disabled\", \"indeterminate\"],\n        outputs: [\"change\", \"indeterminateChange\"],\n        exportAs: [\"matCheckbox\"]\n      }, {\n        kind: \"component\",\n        type: i9.MatFormField,\n        selector: \"mat-form-field\",\n        inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"],\n        exportAs: [\"matFormField\"]\n      }, {\n        kind: \"directive\",\n        type: i9.MatLabel,\n        selector: \"mat-label\"\n      }, {\n        kind: \"directive\",\n        type: i9.MatError,\n        selector: \"mat-error, [matError]\",\n        inputs: [\"id\"]\n      }, {\n        kind: \"component\",\n        type: i10.MatIcon,\n        selector: \"mat-icon\",\n        inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"],\n        exportAs: [\"matIcon\"]\n      }, {\n        kind: \"directive\",\n        type: i11.MatInput,\n        selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\",\n        inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\", \"disabledInteractive\"],\n        exportAs: [\"matInput\"]\n      }, {\n        kind: \"component\",\n        type: i12.MatProgressSpinner,\n        selector: \"mat-progress-spinner, mat-spinner\",\n        inputs: [\"color\", \"mode\", \"value\", \"diameter\", \"strokeWidth\"],\n        exportAs: [\"matProgressSpinner\"]\n      }, {\n        kind: \"directive\",\n        type: i13.MatRadioGroup,\n        selector: \"mat-radio-group\",\n        inputs: [\"color\", \"name\", \"labelPosition\", \"value\", \"selected\", \"disabled\", \"required\", \"disabledInteractive\"],\n        outputs: [\"change\"],\n        exportAs: [\"matRadioGroup\"]\n      }, {\n        kind: \"component\",\n        type: i13.MatRadioButton,\n        selector: \"mat-radio-button\",\n        inputs: [\"id\", \"name\", \"aria-label\", \"aria-labelledby\", \"aria-describedby\", \"disableRipple\", \"tabIndex\", \"checked\", \"value\", \"labelPosition\", \"disabled\", \"required\", \"color\", \"disabledInteractive\"],\n        outputs: [\"change\"],\n        exportAs: [\"matRadioButton\"]\n      }, {\n        kind: \"component\",\n        type: i14.MatSelect,\n        selector: \"mat-select\",\n        inputs: [\"aria-describedby\", \"panelClass\", \"disabled\", \"disableRipple\", \"tabIndex\", \"hideSingleSelectionIndicator\", \"placeholder\", \"required\", \"multiple\", \"disableOptionCentering\", \"compareWith\", \"value\", \"aria-label\", \"aria-labelledby\", \"errorStateMatcher\", \"typeaheadDebounceInterval\", \"sortComparator\", \"id\", \"panelWidth\", \"canSelectNullableOptions\"],\n        outputs: [\"openedChange\", \"opened\", \"closed\", \"selectionChange\", \"valueChange\"],\n        exportAs: [\"matSelect\"]\n      }, {\n        kind: \"component\",\n        type: i14.MatOption,\n        selector: \"mat-option\",\n        inputs: [\"value\", \"id\", \"disabled\"],\n        outputs: [\"onSelectionChange\"],\n        exportAs: [\"matOption\"]\n      }]\n    });\n  }\n  return FormPreviewComponent;\n})();\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.5\",\n  ngImport: i0,\n  type: FormPreviewComponent,\n  decorators: [{\n    type: Component,\n    args: [{\n      selector: 'app-form-preview',\n      standalone: false,\n      template: \"<div class=\\\"container mt-4\\\">\\n  <div class=\\\"d-flex justify-content-between align-items-center mb-4\\\">\\n    <h1>{{ previewMode ? 'Form Preview' : 'Form Submission' }}</h1>\\n    <div>\\n      <button mat-raised-button color=\\\"basic\\\" (click)=\\\"backToBuilder()\\\">\\n        <mat-icon>arrow_back</mat-icon> Back to Builder\\n      </button>\\n      <button mat-raised-button color=\\\"accent\\\" class=\\\"ml-2\\\" (click)=\\\"togglePreviewMode()\\\">\\n        <mat-icon>{{ previewMode ? 'edit' : 'visibility' }}</mat-icon>\\n        {{ previewMode ? 'Switch to Submission Mode' : 'Switch to Preview Mode' }}\\n      </button>\\n    </div>\\n  </div>\\n\\n  <div *ngIf=\\\"loading\\\" class=\\\"d-flex justify-content-center\\\">\\n    <mat-spinner diameter=\\\"40\\\"></mat-spinner>\\n  </div>\\n\\n  <div *ngIf=\\\"!loading && form\\\">\\n    <div class=\\\"form-header mb-4\\\">\\n      <h2>{{ form.title }}</h2>\\n      <p *ngIf=\\\"form.description\\\">{{ form.description }}</p>\\n    </div>\\n\\n    <form [formGroup]=\\\"formGroup\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n      <div *ngFor=\\\"let section of form.sections\\\" class=\\\"mb-4\\\">\\n        <mat-card>\\n          <mat-card-header>\\n            <mat-card-title>{{ section.title }}</mat-card-title>\\n            <mat-card-subtitle *ngIf=\\\"section.description\\\">{{ section.description }}</mat-card-subtitle>\\n          </mat-card-header>\\n          <mat-card-content>\\n            <div *ngFor=\\\"let control of section.controls\\\" class=\\\"mb-3\\\" \\n                 [hidden]=\\\"!controlVisibility[control.id]\\\">\\n              \\n              <!-- Note Control -->\\n              <div *ngIf=\\\"control.type === 'Note'\\\" class=\\\"note-control\\\">\\n                <div class=\\\"alert alert-info\\\">\\n                  {{ control.configuration.noteText }}\\n                </div>\\n              </div>\\n              \\n              <!-- Text Control -->\\n              <mat-form-field *ngIf=\\\"control.type === 'Text'\\\" class=\\\"w-100\\\">\\n                <mat-label>{{ control.label }}</mat-label>\\n                <input matInput [formControlName]=\\\"'control_' + control.id\\\" \\n                      [type]=\\\"control.configuration.inputType === 'Number' ? 'number' : \\n                              control.configuration.inputType === 'Email' ? 'email' : 'text'\\\"\\n                      [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('required')\\\">\\n                  This field is required\\n                </mat-error>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('min')\\\">\\n                  Value is below minimum allowed ({{ control.configuration.minValue }})\\n                </mat-error>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('max')\\\">\\n                  Value is above maximum allowed ({{ control.configuration.maxValue }})\\n                </mat-error>\\n              </mat-form-field>\\n              \\n              <!-- Textarea Control -->\\n              <mat-form-field *ngIf=\\\"control.type === 'Textarea'\\\" class=\\\"w-100\\\">\\n                <mat-label>{{ control.label }}</mat-label>\\n                <textarea matInput [formControlName]=\\\"'control_' + control.id\\\" rows=\\\"4\\\"\\n                         [disabled]=\\\"!controlEnabled[control.id]\\\"></textarea>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('required')\\\">\\n                  This field is required\\n                </mat-error>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('maxlength')\\\">\\n                  Maximum length exceeded ({{ control.configuration.maxLength }} characters)\\n                </mat-error>\\n              </mat-form-field>\\n              \\n              <!-- Radio Group Control -->\\n              <div *ngIf=\\\"control.type === 'RadioGroup'\\\">\\n                <div class=\\\"form-label\\\">{{ control.label }} <span *ngIf=\\\"control.isRequired\\\" class=\\\"required-marker\\\">*</span></div>\\n                <mat-radio-group [formControlName]=\\\"'control_' + control.id\\\" \\n                                [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                  <mat-radio-button *ngFor=\\\"let option of control.options\\\" \\n                                   [value]=\\\"option.value\\\" class=\\\"d-block mb-2\\\">\\n                    {{ option.text }}\\n                  </mat-radio-button>\\n                </mat-radio-group>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('required') && \\n                                formGroup.get('control_' + control.id)?.touched\\\">\\n                  This field is required\\n                </mat-error>\\n              </div>\\n              \\n              <!-- Checkbox Group Control -->\\n              <div *ngIf=\\\"control.type === 'CheckboxGroup'\\\">\\n                <div class=\\\"form-label\\\">{{ control.label }} <span *ngIf=\\\"control.isRequired\\\" class=\\\"required-marker\\\">*</span></div>\\n                <div *ngFor=\\\"let option of control.options\\\" class=\\\"mb-2\\\">\\n                  <mat-checkbox [value]=\\\"option.value\\\" \\n                               [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                    {{ option.text }}\\n                  </mat-checkbox>\\n                </div>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('required') && \\n                                formGroup.get('control_' + control.id)?.touched\\\">\\n                  This field is required\\n                </mat-error>\\n              </div>\\n              \\n              <!-- Dropdown Control -->\\n              <mat-form-field *ngIf=\\\"control.type === 'Dropdown'\\\" class=\\\"w-100\\\">\\n                <mat-label>{{ control.label }}</mat-label>\\n                <mat-select [formControlName]=\\\"'control_' + control.id\\\" \\n                           [multiple]=\\\"control.configuration.selectionType === 'Multiple'\\\"\\n                           [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                  <mat-option *ngFor=\\\"let option of control.options\\\" [value]=\\\"option.value\\\">\\n                    {{ option.text }}\\n                  </mat-option>\\n                </mat-select>\\n                <mat-error *ngIf=\\\"formGroup.get('control_' + control.id)?.hasError('required')\\\">\\n                  This field is required\\n                </mat-error>\\n              </mat-form-field>\\n              \\n              <!-- File Upload Control -->\\n              <div *ngIf=\\\"control.type === 'FileUpload'\\\">\\n                <div class=\\\"form-label\\\">{{ control.label }} <span *ngIf=\\\"control.isRequired\\\" class=\\\"required-marker\\\">*</span></div>\\n                <button mat-raised-button color=\\\"basic\\\" type=\\\"button\\\"\\n                       [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                  <mat-icon>cloud_upload</mat-icon> Upload File\\n                </button>\\n                <p class=\\\"text-muted small mt-1\\\">\\n                  Accepted file types: {{ control.configuration.acceptedFileTypes?.join(', ') || 'All files' }}\\n                </p>\\n              </div>\\n              \\n              <!-- Signature Control -->\\n              <div *ngIf=\\\"control.type === 'Signature'\\\">\\n                <div class=\\\"form-label\\\">{{ control.label }} <span *ngIf=\\\"control.isRequired\\\" class=\\\"required-marker\\\">*</span></div>\\n                <div class=\\\"signature-pad mt-2 p-2 border rounded\\\" \\n                     [class.disabled]=\\\"!controlEnabled[control.id]\\\">\\n                  <p class=\\\"text-center text-muted\\\">\\n                    <mat-icon>draw</mat-icon> \\n                    Sign here\\n                  </p>\\n                </div>\\n                <div class=\\\"text-right mt-2\\\">\\n                  <button mat-button type=\\\"button\\\" color=\\\"warn\\\" [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                    Clear Signature\\n                  </button>\\n                </div>\\n              </div>\\n              \\n              <!-- Location Picker Control -->\\n              <div *ngIf=\\\"control.type === 'LocationPicker'\\\">\\n                <div class=\\\"form-label\\\">{{ control.label }} <span *ngIf=\\\"control.isRequired\\\" class=\\\"required-marker\\\">*</span></div>\\n                <button mat-raised-button color=\\\"basic\\\" type=\\\"button\\\"\\n                       [disabled]=\\\"!controlEnabled[control.id]\\\">\\n                  <mat-icon>location_on</mat-icon> Capture Location\\n                </button>\\n                <div *ngIf=\\\"control.configuration.showMap && controlEnabled[control.id]\\\" class=\\\"mt-2\\\">\\n                  <div class=\\\"location-map-placeholder\\\">\\n                    <p class=\\\"text-center text-muted\\\">Map would appear here</p>\\n                  </div>\\n                </div>\\n              </div>\\n              \\n            </div>\\n          </mat-card-content>\\n        </mat-card>\\n      </div>\\n\\n      <div class=\\\"form-actions mt-4 mb-5 text-right\\\">\\n        <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"previewMode && formGroup.invalid\\\">\\n          {{ previewMode ? 'Validate Form' : 'Submit Form' }}\\n        </button>\\n      </div>\\n    </form>\\n  </div>\\n</div>\\n\"\n    }]\n  }],\n  ctorParameters: () => [{\n    type: i1.ActivatedRoute\n  }, {\n    type: i1.Router\n  }, {\n    type: i2.FormBuilder\n  }, {\n    type: i3.FormService\n  }, {\n    type: i4.MatSnackBar\n  }]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}