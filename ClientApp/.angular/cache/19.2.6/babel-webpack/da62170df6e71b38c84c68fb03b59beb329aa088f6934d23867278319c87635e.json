{"ast":null,"code":"import { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { ControlConfigComponent } from './control-config/control-config.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../shared/services/form.service\";\nimport * as i4 from \"../../shared/services/control.service\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"@angular/material/snack-bar\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/cdk/drag-drop\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/card\";\nimport * as i11 from \"@angular/material/checkbox\";\nimport * as i12 from \"@angular/material/form-field\";\nimport * as i13 from \"@angular/material/icon\";\nimport * as i14 from \"@angular/material/input\";\nimport * as i15 from \"@angular/material/progress-spinner\";\nexport let FormBuilderComponent = /*#__PURE__*/(() => {\n  class FormBuilderComponent {\n    route;\n    router;\n    fb;\n    formService;\n    controlService;\n    dialog;\n    snackBar;\n    formId = null;\n    form = null;\n    formGroup;\n    loading = false;\n    availableControls = [{\n      type: 'Text',\n      label: 'Text Field',\n      icon: 'text_fields'\n    }, {\n      type: 'Textarea',\n      label: 'Text Area',\n      icon: 'notes'\n    }, {\n      type: 'RadioGroup',\n      label: 'Radio Group',\n      icon: 'radio_button_checked'\n    }, {\n      type: 'CheckboxGroup',\n      label: 'Checkbox Group',\n      icon: 'check_box'\n    }, {\n      type: 'Dropdown',\n      label: 'Dropdown',\n      icon: 'arrow_drop_down_circle'\n    }, {\n      type: 'FileUpload',\n      label: 'File Upload',\n      icon: 'cloud_upload'\n    }, {\n      type: 'Signature',\n      label: 'Signature',\n      icon: 'draw'\n    }, {\n      type: 'LocationPicker',\n      label: 'Location Picker',\n      icon: 'location_on'\n    }, {\n      type: 'Note',\n      label: 'Note',\n      icon: 'info'\n    }];\n    isNewSection = false;\n    sectionForm;\n    constructor(route, router, fb, formService, controlService, dialog, snackBar) {\n      this.route = route;\n      this.router = router;\n      this.fb = fb;\n      this.formService = formService;\n      this.controlService = controlService;\n      this.dialog = dialog;\n      this.snackBar = snackBar;\n      this.formGroup = this.fb.group({\n        title: ['', Validators.required],\n        description: ['']\n      });\n      this.sectionForm = this.fb.group({\n        title: ['', Validators.required],\n        description: ['']\n      });\n    }\n    ngOnInit() {\n      this.route.paramMap.subscribe(params => {\n        const idParam = params.get('id');\n        if (idParam) {\n          this.formId = +idParam;\n          this.loadForm(this.formId);\n        } else {\n          this.initNewForm();\n        }\n      });\n    }\n    loadForm(id) {\n      this.loading = true;\n      this.formService.getForm(id).subscribe({\n        next: form => {\n          this.form = form;\n          this.formGroup.patchValue({\n            title: form.title,\n            description: form.description\n          });\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error loading form: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    }\n    initNewForm() {\n      this.form = {\n        id: 0,\n        title: '',\n        description: '',\n        createdBy: 'current-user',\n        // In a real app, get from auth service\n        createdDate: new Date(),\n        modifiedDate: new Date(),\n        isPublished: false,\n        sections: [{\n          id: 0,\n          formId: 0,\n          title: 'Section 1',\n          description: '',\n          orderIndex: 0,\n          controls: []\n        }]\n      };\n    }\n    saveForm() {\n      if (this.formGroup.invalid) {\n        this.snackBar.open('Please fill in all required fields', 'Close', {\n          duration: 3000\n        });\n        return;\n      }\n      const formData = {\n        ...this.form,\n        title: this.formGroup.value.title,\n        description: this.formGroup.value.description,\n        modifiedDate: new Date()\n      };\n      this.loading = true;\n      if (this.formId) {\n        this.formService.updateForm(formData).subscribe({\n          next: response => {\n            this.form = response;\n            this.snackBar.open('Form updated successfully', 'Close', {\n              duration: 3000\n            });\n            this.loading = false;\n          },\n          error: err => {\n            this.snackBar.open('Error updating form: ' + err.message, 'Close', {\n              duration: 3000\n            });\n            this.loading = false;\n          }\n        });\n      } else {\n        this.formService.createForm(formData).subscribe({\n          next: response => {\n            this.form = response;\n            this.formId = response.id;\n            this.router.navigate(['/forms', this.formId]);\n            this.snackBar.open('Form created successfully', 'Close', {\n              duration: 3000\n            });\n            this.loading = false;\n          },\n          error: err => {\n            this.snackBar.open('Error creating form: ' + err.message, 'Close', {\n              duration: 3000\n            });\n            this.loading = false;\n          }\n        });\n      }\n    }\n    publishForm() {\n      if (!this.formId) {\n        this.snackBar.open('Please save the form before publishing', 'Close', {\n          duration: 3000\n        });\n        return;\n      }\n      this.loading = true;\n      this.formService.publishForm(this.formId).subscribe({\n        next: response => {\n          this.form = response;\n          this.snackBar.open('Form published successfully', 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error publishing form: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    }\n    addSection() {\n      if (!this.form) return;\n      const newSection = {\n        id: 0,\n        // Will be set by the backend\n        formId: this.form.id,\n        title: `Section ${this.form.sections.length + 1}`,\n        description: '',\n        orderIndex: this.form.sections.length,\n        controls: []\n      };\n      this.form.sections.push(newSection);\n    }\n    deleteSection(index) {\n      if (!this.form) return;\n      this.form.sections.splice(index, 1);\n      // Update the orderIndex for the remaining sections\n      this.form.sections.forEach((section, idx) => {\n        section.orderIndex = idx;\n      });\n    }\n    dropControl(event, sectionIndex) {\n      if (!this.form) return;\n      if (event.previousContainer === event.container) {\n        // Reordering within the same section\n        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n        // Update the orderIndex for the controls\n        event.container.data.forEach((control, idx) => {\n          control.orderIndex = idx;\n        });\n        if (this.formId) {\n          this.controlService.updateControlOrder(this.form.sections[sectionIndex].id, event.container.data.map(control => control.id)).subscribe();\n        }\n      } else {\n        // Adding a new control from the available controls panel\n        const controlType = this.availableControls[event.previousIndex].type;\n        // Open configuration dialog\n        this.openControlConfig(null, controlType, sectionIndex, event.currentIndex);\n      }\n    }\n    openControlConfig(control, type, sectionIndex, orderIndex) {\n      const dialogRef = this.dialog.open(ControlConfigComponent, {\n        width: '600px',\n        data: {\n          control,\n          type,\n          sectionId: this.form?.sections[sectionIndex].id,\n          availableControls: this.form?.sections.flatMap(s => s.controls) || []\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          if (control) {\n            // Update existing control\n            const sectionControls = this.form?.sections[sectionIndex].controls || [];\n            const controlIndex = sectionControls.findIndex(c => c.id === control.id);\n            if (controlIndex !== -1 && this.form) {\n              this.form.sections[sectionIndex].controls[controlIndex] = result;\n            }\n          } else {\n            // Add new control\n            const newControl = {\n              ...result,\n              orderIndex,\n              sectionId: this.form?.sections[sectionIndex].id || 0\n            };\n            if (this.form) {\n              this.form.sections[sectionIndex].controls.splice(orderIndex, 0, newControl);\n              // Update the orderIndex for the controls\n              this.form.sections[sectionIndex].controls.forEach((control, idx) => {\n                control.orderIndex = idx;\n              });\n            }\n          }\n        }\n      });\n    }\n    editControl(control, sectionIndex) {\n      this.openControlConfig(control, null, sectionIndex, control.orderIndex);\n    }\n    deleteControl(controlIndex, sectionIndex) {\n      if (!this.form) return;\n      const control = this.form.sections[sectionIndex].controls[controlIndex];\n      if (control.id && this.formId) {\n        this.controlService.deleteControl(control.id).subscribe({\n          next: () => {\n            this.form?.sections[sectionIndex].controls.splice(controlIndex, 1);\n            // Update the orderIndex for the remaining controls\n            this.form?.sections[sectionIndex].controls.forEach((c, idx) => {\n              c.orderIndex = idx;\n            });\n            this.snackBar.open('Control deleted successfully', 'Close', {\n              duration: 3000\n            });\n          },\n          error: err => {\n            this.snackBar.open('Error deleting control: ' + err.message, 'Close', {\n              duration: 3000\n            });\n          }\n        });\n      } else {\n        this.form.sections[sectionIndex].controls.splice(controlIndex, 1);\n        // Update the orderIndex for the remaining controls\n        this.form.sections[sectionIndex].controls.forEach((c, idx) => {\n          c.orderIndex = idx;\n        });\n      }\n    }\n    previewForm() {\n      if (this.formId) {\n        this.router.navigate(['/forms', this.formId, 'preview']);\n      } else {\n        this.snackBar.open('Please save the form before previewing', 'Close', {\n          duration: 3000\n        });\n      }\n    }\n    getControlIcon(type) {\n      const control = this.availableControls.find(c => c.type === type);\n      return control ? control.icon : 'help_outline';\n    }\n    saveSectionDialog() {\n      if (this.sectionForm.invalid) {\n        return;\n      }\n      // Dialog data would be handled here\n      // This is a placeholder for the actual implementation\n      this.snackBar.open('Section saved successfully', 'Close', {\n        duration: 3000\n      });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"19.2.5\",\n      ngImport: i0,\n      type: FormBuilderComponent,\n      deps: [{\n        token: i1.ActivatedRoute\n      }, {\n        token: i1.Router\n      }, {\n        token: i2.FormBuilder\n      }, {\n        token: i3.FormService\n      }, {\n        token: i4.ControlService\n      }, {\n        token: i5.MatDialog\n      }, {\n        token: i6.MatSnackBar\n      }],\n      target: i0.ɵɵFactoryTarget.Component\n    });\n    static ɵcmp = i0.ɵɵngDeclareComponent({\n      minVersion: \"14.0.0\",\n      version: \"19.2.5\",\n      type: FormBuilderComponent,\n      isStandalone: false,\n      selector: \"app-form-builder\",\n      ngImport: i0,\n      template: \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n      <h1>Form Builder</h1>\\n      \\n      <div class=\\\"d-flex justify-content-between mb-3\\\">\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"saveForm()\\\">\\n          <mat-icon>save</mat-icon> Save Form\\n        </button>\\n        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"previewForm()\\\" [disabled]=\\\"!form || form.sections.length === 0\\\">\\n          <mat-icon>preview</mat-icon> Preview Form\\n        </button>\\n      </div>\\n      \\n      <div class=\\\"mb-3\\\">\\n        <mat-form-field class=\\\"w-100\\\">\\n          <mat-label>Form Title</mat-label>\\n          <input matInput [(ngModel)]=\\\"form.title\\\" placeholder=\\\"Enter form title\\\" required>\\n        </mat-form-field>\\n      </div>\\n      \\n      <div class=\\\"mb-3\\\">\\n        <mat-form-field class=\\\"w-100\\\">\\n          <mat-label>Form Description</mat-label>\\n          <textarea matInput [(ngModel)]=\\\"form.description\\\" placeholder=\\\"Enter form description\\\" rows=\\\"2\\\"></textarea>\\n        </mat-form-field>\\n      </div>\\n      \\n      <mat-checkbox [(ngModel)]=\\\"form.isPublished\\\" class=\\\"mb-3\\\">\\n        Published (available for assignments)\\n      </mat-checkbox>\\n    </div>\\n  </div>\\n  \\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-4\\\">\\n      <mat-card>\\n        <mat-card-header>\\n          <mat-card-title>Available Controls</mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content>\\n          <div \\n            cdkDropList\\n            id=\\\"available-controls\\\"\\n            [cdkDropListData]=\\\"availableControls\\\"\\n            class=\\\"available-controls-container\\\">\\n            <div class=\\\"control-box\\\" *ngFor=\\\"let control of availableControls\\\" cdkDrag>\\n              <div class=\\\"d-flex align-items-center\\\">\\n                <mat-icon class=\\\"mr-2\\\">{{ getControlIcon(control.type) }}</mat-icon>\\n                <span>{{ control.type }}</span>\\n              </div>\\n            </div>\\n          </div>\\n        </mat-card-content>\\n      </mat-card>\\n    </div>\\n\\n    <div class=\\\"col-md-8\\\">\\n      <div *ngIf=\\\"form\\\">\\n        <div *ngFor=\\\"let section of form.sections; let sectionIndex = index\\\" class=\\\"mb-4\\\">\\n          <mat-card>\\n            <mat-card-header>\\n              <mat-card-title class=\\\"d-flex justify-content-between align-items-center\\\">\\n                <span>{{ section.title }}</span>\\n                <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteSection(sectionIndex)\\\" *ngIf=\\\"form.sections.length > 1\\\">\\n                  <mat-icon>delete</mat-icon>\\n                </button>\\n              </mat-card-title>\\n              <mat-card-subtitle *ngIf=\\\"section.description\\\">{{ section.description }}</mat-card-subtitle>\\n            </mat-card-header>\\n            <mat-card-content>\\n              <div \\n                cdkDropList\\n                id=\\\"section-{{sectionIndex}}\\\"\\n                [cdkDropListData]=\\\"section.controls\\\"\\n                [cdkDropListConnectedTo]=\\\"['available-controls']\\\"\\n                (cdkDropListDropped)=\\\"dropControl($event, sectionIndex)\\\"\\n                class=\\\"form-controls-container\\\">\\n                <div class=\\\"control-box\\\" *ngFor=\\\"let control of section.controls; let controlIndex = index\\\" cdkDrag>\\n                  <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n                    <div>\\n                      <strong>{{ control.label }}</strong>\\n                      <span class=\\\"ml-2 control-type-badge\\\">{{ control.type }}</span>\\n                      <span *ngIf=\\\"control.isRequired\\\" class=\\\"ml-2 required-badge\\\">Required</span>\\n                    </div>\\n                    <div>\\n                      <button mat-icon-button color=\\\"primary\\\" (click)=\\\"editControl(control, sectionIndex)\\\">\\n                        <mat-icon>edit</mat-icon>\\n                      </button>\\n                      <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteControl(controlIndex, sectionIndex)\\\">\\n                        <mat-icon>delete</mat-icon>\\n                      </button>\\n                    </div>\\n                  </div>\\n                </div>\\n                <div *ngIf=\\\"section.controls.length === 0\\\" class=\\\"empty-section\\\">\\n                  <p class=\\\"text-muted\\\">Drag and drop controls here</p>\\n                </div>\\n              </div>\\n            </mat-card-content>\\n          </mat-card>\\n        </div>\\n\\n        <div class=\\\"text-center mt-3\\\">\\n          <button mat-raised-button color=\\\"basic\\\" (click)=\\\"addSection()\\\">\\n            <mat-icon>add</mat-icon> Add Section\\n          </button>\\n        </div>\\n      </div>\\n\\n      <div *ngIf=\\\"loading\\\" class=\\\"text-center\\\">\\n        <mat-spinner diameter=\\\"40\\\"></mat-spinner>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<!-- Edit Section Dialog -->\\n<ng-template #editSectionDialog>\\n  <h2 mat-dialog-title>{{ isNewSection ? 'Add Section' : 'Edit Section' }}</h2>\\n  <mat-dialog-content>\\n    <form [formGroup]=\\\"sectionForm\\\">\\n      <mat-form-field class=\\\"w-100 mb-3\\\">\\n        <mat-label>Section Title</mat-label>\\n        <input matInput formControlName=\\\"title\\\" placeholder=\\\"Enter section title\\\" required>\\n        <mat-error *ngIf=\\\"sectionForm.get('title')?.hasError('required')\\\">Title is required</mat-error>\\n      </mat-form-field>\\n      \\n      <mat-form-field class=\\\"w-100\\\">\\n        <mat-label>Section Description</mat-label>\\n        <textarea matInput formControlName=\\\"description\\\" placeholder=\\\"Enter section description\\\" rows=\\\"3\\\"></textarea>\\n      </mat-form-field>\\n    </form>\\n  </mat-dialog-content>\\n  <mat-dialog-actions align=\\\"end\\\">\\n    <button mat-button mat-dialog-close>Cancel</button>\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"saveSectionDialog()\\\" [disabled]=\\\"sectionForm.invalid\\\">Save</button>\\n  </mat-dialog-actions>\\n</ng-template>\\n\",\n      dependencies: [{\n        kind: \"directive\",\n        type: i7.NgForOf,\n        selector: \"[ngFor][ngForOf]\",\n        inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"]\n      }, {\n        kind: \"directive\",\n        type: i7.NgIf,\n        selector: \"[ngIf]\",\n        inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"]\n      }, {\n        kind: \"directive\",\n        type: i2.ɵNgNoValidate,\n        selector: \"form:not([ngNoForm]):not([ngNativeValidate])\"\n      }, {\n        kind: \"directive\",\n        type: i2.DefaultValueAccessor,\n        selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\"\n      }, {\n        kind: \"directive\",\n        type: i2.NgControlStatus,\n        selector: \"[formControlName],[ngModel],[formControl]\"\n      }, {\n        kind: \"directive\",\n        type: i2.NgControlStatusGroup,\n        selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\"\n      }, {\n        kind: \"directive\",\n        type: i2.RequiredValidator,\n        selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\",\n        inputs: [\"required\"]\n      }, {\n        kind: \"directive\",\n        type: i2.NgModel,\n        selector: \"[ngModel]:not([formControlName]):not([formControl])\",\n        inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"],\n        outputs: [\"ngModelChange\"],\n        exportAs: [\"ngModel\"]\n      }, {\n        kind: \"directive\",\n        type: i2.FormGroupDirective,\n        selector: \"[formGroup]\",\n        inputs: [\"formGroup\"],\n        outputs: [\"ngSubmit\"],\n        exportAs: [\"ngForm\"]\n      }, {\n        kind: \"directive\",\n        type: i2.FormControlName,\n        selector: \"[formControlName]\",\n        inputs: [\"formControlName\", \"disabled\", \"ngModel\"],\n        outputs: [\"ngModelChange\"]\n      }, {\n        kind: \"directive\",\n        type: i8.CdkDropList,\n        selector: \"[cdkDropList], cdk-drop-list\",\n        inputs: [\"cdkDropListConnectedTo\", \"cdkDropListData\", \"cdkDropListOrientation\", \"id\", \"cdkDropListLockAxis\", \"cdkDropListDisabled\", \"cdkDropListSortingDisabled\", \"cdkDropListEnterPredicate\", \"cdkDropListSortPredicate\", \"cdkDropListAutoScrollDisabled\", \"cdkDropListAutoScrollStep\", \"cdkDropListElementContainer\"],\n        outputs: [\"cdkDropListDropped\", \"cdkDropListEntered\", \"cdkDropListExited\", \"cdkDropListSorted\"],\n        exportAs: [\"cdkDropList\"]\n      }, {\n        kind: \"directive\",\n        type: i8.CdkDrag,\n        selector: \"[cdkDrag]\",\n        inputs: [\"cdkDragData\", \"cdkDragLockAxis\", \"cdkDragRootElement\", \"cdkDragBoundary\", \"cdkDragStartDelay\", \"cdkDragFreeDragPosition\", \"cdkDragDisabled\", \"cdkDragConstrainPosition\", \"cdkDragPreviewClass\", \"cdkDragPreviewContainer\", \"cdkDragScale\"],\n        outputs: [\"cdkDragStarted\", \"cdkDragReleased\", \"cdkDragEnded\", \"cdkDragEntered\", \"cdkDragExited\", \"cdkDragDropped\", \"cdkDragMoved\"],\n        exportAs: [\"cdkDrag\"]\n      }, {\n        kind: \"component\",\n        type: i9.MatButton,\n        selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \",\n        exportAs: [\"matButton\"]\n      }, {\n        kind: \"component\",\n        type: i9.MatIconButton,\n        selector: \"button[mat-icon-button]\",\n        exportAs: [\"matButton\"]\n      }, {\n        kind: \"component\",\n        type: i10.MatCard,\n        selector: \"mat-card\",\n        inputs: [\"appearance\"],\n        exportAs: [\"matCard\"]\n      }, {\n        kind: \"directive\",\n        type: i10.MatCardContent,\n        selector: \"mat-card-content\"\n      }, {\n        kind: \"component\",\n        type: i10.MatCardHeader,\n        selector: \"mat-card-header\"\n      }, {\n        kind: \"directive\",\n        type: i10.MatCardSubtitle,\n        selector: \"mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]\"\n      }, {\n        kind: \"directive\",\n        type: i10.MatCardTitle,\n        selector: \"mat-card-title, [mat-card-title], [matCardTitle]\"\n      }, {\n        kind: \"component\",\n        type: i11.MatCheckbox,\n        selector: \"mat-checkbox\",\n        inputs: [\"aria-label\", \"aria-labelledby\", \"aria-describedby\", \"aria-expanded\", \"aria-controls\", \"aria-owns\", \"id\", \"required\", \"labelPosition\", \"name\", \"value\", \"disableRipple\", \"tabIndex\", \"color\", \"disabledInteractive\", \"checked\", \"disabled\", \"indeterminate\"],\n        outputs: [\"change\", \"indeterminateChange\"],\n        exportAs: [\"matCheckbox\"]\n      }, {\n        kind: \"directive\",\n        type: i5.MatDialogClose,\n        selector: \"[mat-dialog-close], [matDialogClose]\",\n        inputs: [\"aria-label\", \"type\", \"mat-dialog-close\", \"matDialogClose\"],\n        exportAs: [\"matDialogClose\"]\n      }, {\n        kind: \"directive\",\n        type: i5.MatDialogTitle,\n        selector: \"[mat-dialog-title], [matDialogTitle]\",\n        inputs: [\"id\"],\n        exportAs: [\"matDialogTitle\"]\n      }, {\n        kind: \"directive\",\n        type: i5.MatDialogActions,\n        selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\",\n        inputs: [\"align\"]\n      }, {\n        kind: \"directive\",\n        type: i5.MatDialogContent,\n        selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\"\n      }, {\n        kind: \"component\",\n        type: i12.MatFormField,\n        selector: \"mat-form-field\",\n        inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"],\n        exportAs: [\"matFormField\"]\n      }, {\n        kind: \"directive\",\n        type: i12.MatLabel,\n        selector: \"mat-label\"\n      }, {\n        kind: \"directive\",\n        type: i12.MatError,\n        selector: \"mat-error, [matError]\",\n        inputs: [\"id\"]\n      }, {\n        kind: \"component\",\n        type: i13.MatIcon,\n        selector: \"mat-icon\",\n        inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"],\n        exportAs: [\"matIcon\"]\n      }, {\n        kind: \"directive\",\n        type: i14.MatInput,\n        selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\",\n        inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\", \"disabledInteractive\"],\n        exportAs: [\"matInput\"]\n      }, {\n        kind: \"component\",\n        type: i15.MatProgressSpinner,\n        selector: \"mat-progress-spinner, mat-spinner\",\n        inputs: [\"color\", \"mode\", \"value\", \"diameter\", \"strokeWidth\"],\n        exportAs: [\"matProgressSpinner\"]\n      }]\n    });\n  }\n  return FormBuilderComponent;\n})();\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.5\",\n  ngImport: i0,\n  type: FormBuilderComponent,\n  decorators: [{\n    type: Component,\n    args: [{\n      selector: 'app-form-builder',\n      standalone: false,\n      template: \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n      <h1>Form Builder</h1>\\n      \\n      <div class=\\\"d-flex justify-content-between mb-3\\\">\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"saveForm()\\\">\\n          <mat-icon>save</mat-icon> Save Form\\n        </button>\\n        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"previewForm()\\\" [disabled]=\\\"!form || form.sections.length === 0\\\">\\n          <mat-icon>preview</mat-icon> Preview Form\\n        </button>\\n      </div>\\n      \\n      <div class=\\\"mb-3\\\">\\n        <mat-form-field class=\\\"w-100\\\">\\n          <mat-label>Form Title</mat-label>\\n          <input matInput [(ngModel)]=\\\"form.title\\\" placeholder=\\\"Enter form title\\\" required>\\n        </mat-form-field>\\n      </div>\\n      \\n      <div class=\\\"mb-3\\\">\\n        <mat-form-field class=\\\"w-100\\\">\\n          <mat-label>Form Description</mat-label>\\n          <textarea matInput [(ngModel)]=\\\"form.description\\\" placeholder=\\\"Enter form description\\\" rows=\\\"2\\\"></textarea>\\n        </mat-form-field>\\n      </div>\\n      \\n      <mat-checkbox [(ngModel)]=\\\"form.isPublished\\\" class=\\\"mb-3\\\">\\n        Published (available for assignments)\\n      </mat-checkbox>\\n    </div>\\n  </div>\\n  \\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-4\\\">\\n      <mat-card>\\n        <mat-card-header>\\n          <mat-card-title>Available Controls</mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content>\\n          <div \\n            cdkDropList\\n            id=\\\"available-controls\\\"\\n            [cdkDropListData]=\\\"availableControls\\\"\\n            class=\\\"available-controls-container\\\">\\n            <div class=\\\"control-box\\\" *ngFor=\\\"let control of availableControls\\\" cdkDrag>\\n              <div class=\\\"d-flex align-items-center\\\">\\n                <mat-icon class=\\\"mr-2\\\">{{ getControlIcon(control.type) }}</mat-icon>\\n                <span>{{ control.type }}</span>\\n              </div>\\n            </div>\\n          </div>\\n        </mat-card-content>\\n      </mat-card>\\n    </div>\\n\\n    <div class=\\\"col-md-8\\\">\\n      <div *ngIf=\\\"form\\\">\\n        <div *ngFor=\\\"let section of form.sections; let sectionIndex = index\\\" class=\\\"mb-4\\\">\\n          <mat-card>\\n            <mat-card-header>\\n              <mat-card-title class=\\\"d-flex justify-content-between align-items-center\\\">\\n                <span>{{ section.title }}</span>\\n                <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteSection(sectionIndex)\\\" *ngIf=\\\"form.sections.length > 1\\\">\\n                  <mat-icon>delete</mat-icon>\\n                </button>\\n              </mat-card-title>\\n              <mat-card-subtitle *ngIf=\\\"section.description\\\">{{ section.description }}</mat-card-subtitle>\\n            </mat-card-header>\\n            <mat-card-content>\\n              <div \\n                cdkDropList\\n                id=\\\"section-{{sectionIndex}}\\\"\\n                [cdkDropListData]=\\\"section.controls\\\"\\n                [cdkDropListConnectedTo]=\\\"['available-controls']\\\"\\n                (cdkDropListDropped)=\\\"dropControl($event, sectionIndex)\\\"\\n                class=\\\"form-controls-container\\\">\\n                <div class=\\\"control-box\\\" *ngFor=\\\"let control of section.controls; let controlIndex = index\\\" cdkDrag>\\n                  <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n                    <div>\\n                      <strong>{{ control.label }}</strong>\\n                      <span class=\\\"ml-2 control-type-badge\\\">{{ control.type }}</span>\\n                      <span *ngIf=\\\"control.isRequired\\\" class=\\\"ml-2 required-badge\\\">Required</span>\\n                    </div>\\n                    <div>\\n                      <button mat-icon-button color=\\\"primary\\\" (click)=\\\"editControl(control, sectionIndex)\\\">\\n                        <mat-icon>edit</mat-icon>\\n                      </button>\\n                      <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteControl(controlIndex, sectionIndex)\\\">\\n                        <mat-icon>delete</mat-icon>\\n                      </button>\\n                    </div>\\n                  </div>\\n                </div>\\n                <div *ngIf=\\\"section.controls.length === 0\\\" class=\\\"empty-section\\\">\\n                  <p class=\\\"text-muted\\\">Drag and drop controls here</p>\\n                </div>\\n              </div>\\n            </mat-card-content>\\n          </mat-card>\\n        </div>\\n\\n        <div class=\\\"text-center mt-3\\\">\\n          <button mat-raised-button color=\\\"basic\\\" (click)=\\\"addSection()\\\">\\n            <mat-icon>add</mat-icon> Add Section\\n          </button>\\n        </div>\\n      </div>\\n\\n      <div *ngIf=\\\"loading\\\" class=\\\"text-center\\\">\\n        <mat-spinner diameter=\\\"40\\\"></mat-spinner>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<!-- Edit Section Dialog -->\\n<ng-template #editSectionDialog>\\n  <h2 mat-dialog-title>{{ isNewSection ? 'Add Section' : 'Edit Section' }}</h2>\\n  <mat-dialog-content>\\n    <form [formGroup]=\\\"sectionForm\\\">\\n      <mat-form-field class=\\\"w-100 mb-3\\\">\\n        <mat-label>Section Title</mat-label>\\n        <input matInput formControlName=\\\"title\\\" placeholder=\\\"Enter section title\\\" required>\\n        <mat-error *ngIf=\\\"sectionForm.get('title')?.hasError('required')\\\">Title is required</mat-error>\\n      </mat-form-field>\\n      \\n      <mat-form-field class=\\\"w-100\\\">\\n        <mat-label>Section Description</mat-label>\\n        <textarea matInput formControlName=\\\"description\\\" placeholder=\\\"Enter section description\\\" rows=\\\"3\\\"></textarea>\\n      </mat-form-field>\\n    </form>\\n  </mat-dialog-content>\\n  <mat-dialog-actions align=\\\"end\\\">\\n    <button mat-button mat-dialog-close>Cancel</button>\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"saveSectionDialog()\\\" [disabled]=\\\"sectionForm.invalid\\\">Save</button>\\n  </mat-dialog-actions>\\n</ng-template>\\n\"\n    }]\n  }],\n  ctorParameters: () => [{\n    type: i1.ActivatedRoute\n  }, {\n    type: i1.Router\n  }, {\n    type: i2.FormBuilder\n  }, {\n    type: i3.FormService\n  }, {\n    type: i4.ControlService\n  }, {\n    type: i5.MatDialog\n  }, {\n    type: i6.MatSnackBar\n  }]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}