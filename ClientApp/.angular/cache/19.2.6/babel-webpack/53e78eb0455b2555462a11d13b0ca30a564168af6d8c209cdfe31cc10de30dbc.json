{"ast":null,"code":"import { b as OverlayContainer } from './overlay-module-1d184db0.mjs';\nexport { B as BlockScrollStrategy, f as CdkConnectedOverlay, C as CdkOverlayOrigin, m as CloseScrollStrategy, j as ConnectedOverlayPositionChange, h as ConnectionPositionPair, F as FlexibleConnectedPositionStrategy, G as GlobalPositionStrategy, N as NoopScrollStrategy, a as Overlay, c as OverlayConfig, b as OverlayContainer, o as OverlayKeyboardDispatcher, d as OverlayModule, n as OverlayOutsideClickDispatcher, g as OverlayPositionBuilder, O as OverlayRef, R as RepositionScrollStrategy, e as STANDARD_DROPDOWN_ADJACENT_POSITIONS, S as STANDARD_DROPDOWN_BELOW_POSITIONS, l as ScrollStrategyOptions, i as ScrollingVisibility, k as validateHorizontalPosition, v as validateVerticalPosition } from './overlay-module-1d184db0.mjs';\nimport * as i0 from '@angular/core';\nimport { inject, RendererFactory2, Injectable } from '@angular/core';\nexport { b as CdkScrollable, S as ScrollDispatcher, V as ViewportRuler, c as ɵɵCdkFixedSizeVirtualScroll, C as ɵɵCdkScrollableModule, d as ɵɵCdkVirtualForOf, e as ɵɵCdkVirtualScrollViewport, g as ɵɵCdkVirtualScrollableElement, f as ɵɵCdkVirtualScrollableWindow } from './scrolling-module-722545e3.mjs';\nexport { D as ɵɵDir } from './bidi-module-04c03e58.mjs';\nimport '@angular/common';\nimport './platform-20fc4de8.mjs';\nimport './backwards-compatibility-08253a84.mjs';\nimport './shadow-dom-318658ae.mjs';\nimport './test-environment-f6f8bc13.mjs';\nimport './style-loader-09eecacc.mjs';\nimport 'rxjs';\nimport 'rxjs/operators';\nimport './css-pixel-value-5d0cae55.mjs';\nimport './array-6239d2f8.mjs';\nimport './scrolling-59340c46.mjs';\nimport './portal-directives-dced6d68.mjs';\nimport './directionality-9d44e426.mjs';\nimport './id-generator-0b91c6f7.mjs';\nimport './keycodes-0e4398c6.mjs';\nimport './modifiers-3e8908bb.mjs';\nimport './element-15999318.mjs';\nimport './recycle-view-repeater-strategy-0f32b0a8.mjs';\nimport './data-source-d79c6e09.mjs';\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nlet FullscreenOverlayContainer = /*#__PURE__*/(() => {\n  class FullscreenOverlayContainer extends OverlayContainer {\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    _fullScreenEventName;\n    _cleanupFullScreenListener;\n    constructor() {\n      super();\n    }\n    ngOnDestroy() {\n      super.ngOnDestroy();\n      this._cleanupFullScreenListener?.();\n    }\n    _createContainer() {\n      const eventName = this._getEventName();\n      super._createContainer();\n      this._adjustParentForFullscreenChange();\n      if (eventName) {\n        this._cleanupFullScreenListener?.();\n        this._cleanupFullScreenListener = this._renderer.listen('document', eventName, () => {\n          this._adjustParentForFullscreenChange();\n        });\n      }\n    }\n    _adjustParentForFullscreenChange() {\n      if (this._containerElement) {\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n      }\n    }\n    _getEventName() {\n      if (!this._fullScreenEventName) {\n        const _document = this._document;\n        if (_document.fullscreenEnabled) {\n          this._fullScreenEventName = 'fullscreenchange';\n        } else if (_document.webkitFullscreenEnabled) {\n          this._fullScreenEventName = 'webkitfullscreenchange';\n        } else if (_document.mozFullScreenEnabled) {\n          this._fullScreenEventName = 'mozfullscreenchange';\n        } else if (_document.msFullscreenEnabled) {\n          this._fullScreenEventName = 'MSFullscreenChange';\n        }\n      }\n      return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n      const _document = this._document;\n      return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;\n    }\n    static ɵfac = function FullscreenOverlayContainer_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FullscreenOverlayContainer)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: FullscreenOverlayContainer,\n      factory: FullscreenOverlayContainer.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return FullscreenOverlayContainer;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { FullscreenOverlayContainer };\n//# sourceMappingURL=overlay.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}