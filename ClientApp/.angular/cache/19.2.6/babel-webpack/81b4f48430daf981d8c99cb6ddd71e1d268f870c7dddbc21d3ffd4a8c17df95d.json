{"ast":null,"code":"import { Component } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../shared/services/form.service\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/card\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/progress-spinner\";\nimport * as i9 from \"@angular/material/table\";\nexport let FormSubmissionComponent = /*#__PURE__*/(() => {\n  class FormSubmissionComponent {\n    route;\n    router;\n    formService;\n    snackBar;\n    submissionId = null;\n    submission = null;\n    form = null;\n    submissions = [];\n    loading = false;\n    displayedColumns = ['id', 'formTitle', 'submittedBy', 'submittedDate', 'actions'];\n    constructor(route, router, formService, snackBar) {\n      this.route = route;\n      this.router = router;\n      this.formService = formService;\n      this.snackBar = snackBar;\n    }\n    ngOnInit() {\n      this.route.paramMap.subscribe(params => {\n        const idParam = params.get('id');\n        if (idParam) {\n          this.submissionId = +idParam;\n          this.loadSubmission(this.submissionId);\n        } else {\n          this.loadSubmissions();\n        }\n      });\n    }\n    loadSubmissions() {\n      this.loading = true;\n      this.formService.getSubmissions().subscribe({\n        next: submissions => {\n          this.submissions = submissions;\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error loading submissions: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    }\n    loadSubmission(id) {\n      this.loading = true;\n      this.formService.getSubmission(id).subscribe({\n        next: submission => {\n          this.submission = submission;\n          this.loadForm(submission.formId);\n        },\n        error: err => {\n          this.snackBar.open('Error loading submission: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n          this.router.navigate(['/submissions']);\n        }\n      });\n    }\n    loadForm(formId) {\n      this.formService.getForm(formId).subscribe({\n        next: form => {\n          this.form = form;\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error loading form: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    }\n    viewSubmission(id) {\n      this.router.navigate(['/submissions', id]);\n    }\n    backToList() {\n      this.router.navigate(['/submissions']);\n    }\n    formatDate(date) {\n      return new Date(date).toLocaleString();\n    }\n    getControlLabel(controlId) {\n      if (!this.form) return '';\n      for (const section of this.form.sections) {\n        const control = section.controls.find(c => c.id === controlId);\n        if (control) {\n          return control.label;\n        }\n      }\n      return 'Unknown Control';\n    }\n    getControlType(controlId) {\n      if (!this.form) return '';\n      for (const section of this.form.sections) {\n        const control = section.controls.find(c => c.id === controlId);\n        if (control) {\n          return control.type;\n        }\n      }\n      return '';\n    }\n    getControlOptions(controlId) {\n      if (!this.form) return [];\n      for (const section of this.form.sections) {\n        const control = section.controls.find(c => c.id === controlId);\n        if (control && control.options) {\n          return control.options;\n        }\n      }\n      return [];\n    }\n    getOptionText(controlId, optionValue) {\n      const options = this.getControlOptions(controlId);\n      const option = options.find(o => o.value === optionValue);\n      return option ? option.text : optionValue;\n    }\n    getDisplayValue(response) {\n      const controlType = this.getControlType(response.controlId);\n      switch (controlType) {\n        case 'RadioGroup':\n        case 'Dropdown':\n          return this.getOptionText(response.controlId, response.value);\n        case 'CheckboxGroup':\n          if (response.optionIds && response.optionIds.length > 0) {\n            return response.optionIds.map(value => this.getOptionText(response.controlId, value)).join(', ');\n          }\n          return '';\n        case 'LocationPicker':\n          if (response.latitude !== undefined && response.longitude !== undefined) {\n            return `Latitude: ${response.latitude}, Longitude: ${response.longitude}`;\n          }\n          return response.value;\n        case 'FileUpload':\n          if (response.fileUrls && response.fileUrls.length > 0) {\n            return response.fileUrls.map(url => {\n              const fileName = url.split('/').pop();\n              return `<a href=\"${url}\" target=\"_blank\">${fileName}</a>`;\n            }).join(', ');\n          }\n          return 'No files';\n        case 'Signature':\n          if (response.signatureUrl) {\n            return `<a href=\"${response.signatureUrl}\" target=\"_blank\">View Signature</a>`;\n          }\n          return 'No signature';\n        default:\n          return response.value;\n      }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"19.2.5\",\n      ngImport: i0,\n      type: FormSubmissionComponent,\n      deps: [{\n        token: i1.ActivatedRoute\n      }, {\n        token: i1.Router\n      }, {\n        token: i2.FormService\n      }, {\n        token: i3.MatSnackBar\n      }],\n      target: i0.ɵɵFactoryTarget.Component\n    });\n    static ɵcmp = i0.ɵɵngDeclareComponent({\n      minVersion: \"14.0.0\",\n      version: \"19.2.5\",\n      type: FormSubmissionComponent,\n      isStandalone: false,\n      selector: \"app-form-submission\",\n      ngImport: i0,\n      template: \"<div class=\\\"container mt-4\\\">\\n  <div *ngIf=\\\"!submissionId\\\">\\n    <div class=\\\"d-flex justify-content-between align-items-center mb-4\\\">\\n      <h1>Form Submissions</h1>\\n    </div>\\n\\n    <div *ngIf=\\\"loading\\\" class=\\\"d-flex justify-content-center\\\">\\n      <mat-spinner diameter=\\\"40\\\"></mat-spinner>\\n    </div>\\n\\n    <div *ngIf=\\\"!loading\\\">\\n      <mat-card>\\n        <mat-card-content>\\n          <table mat-table [dataSource]=\\\"submissions\\\" class=\\\"w-100\\\">\\n            <!-- ID Column -->\\n            <ng-container matColumnDef=\\\"id\\\">\\n              <th mat-header-cell *matHeaderCellDef>ID</th>\\n              <td mat-cell *matCellDef=\\\"let submission\\\">{{ submission.id }}</td>\\n            </ng-container>\\n\\n            <!-- Form Title Column -->\\n            <ng-container matColumnDef=\\\"formTitle\\\">\\n              <th mat-header-cell *matHeaderCellDef>Form</th>\\n              <td mat-cell *matCellDef=\\\"let submission\\\">\\n                <!-- In a real application, we would fetch the form title -->\\n                Form #{{ submission.formId }}\\n              </td>\\n            </ng-container>\\n\\n            <!-- Submitted By Column -->\\n            <ng-container matColumnDef=\\\"submittedBy\\\">\\n              <th mat-header-cell *matHeaderCellDef>Submitted By</th>\\n              <td mat-cell *matCellDef=\\\"let submission\\\">{{ submission.submittedBy }}</td>\\n            </ng-container>\\n\\n            <!-- Submitted Date Column -->\\n            <ng-container matColumnDef=\\\"submittedDate\\\">\\n              <th mat-header-cell *matHeaderCellDef>Submitted Date</th>\\n              <td mat-cell *matCellDef=\\\"let submission\\\">{{ formatDate(submission.submittedDate) }}</td>\\n            </ng-container>\\n\\n            <!-- Actions Column -->\\n            <ng-container matColumnDef=\\\"actions\\\">\\n              <th mat-header-cell *matHeaderCellDef>Actions</th>\\n              <td mat-cell *matCellDef=\\\"let submission\\\">\\n                <button mat-icon-button color=\\\"primary\\\" (click)=\\\"viewSubmission(submission.id)\\\">\\n                  <mat-icon>visibility</mat-icon>\\n                </button>\\n              </td>\\n            </ng-container>\\n\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n          </table>\\n\\n          <div *ngIf=\\\"submissions.length === 0\\\" class=\\\"p-4 text-center\\\">\\n            <p class=\\\"text-muted\\\">No submissions found</p>\\n          </div>\\n        </mat-card-content>\\n      </mat-card>\\n    </div>\\n  </div>\\n\\n  <div *ngIf=\\\"submissionId\\\">\\n    <div class=\\\"d-flex justify-content-between align-items-center mb-4\\\">\\n      <h1>Submission Details</h1>\\n      <button mat-raised-button color=\\\"basic\\\" (click)=\\\"backToList()\\\">\\n        <mat-icon>arrow_back</mat-icon> Back to List\\n      </button>\\n    </div>\\n\\n    <div *ngIf=\\\"loading\\\" class=\\\"d-flex justify-content-center\\\">\\n      <mat-spinner diameter=\\\"40\\\"></mat-spinner>\\n    </div>\\n\\n    <div *ngIf=\\\"!loading && submission && form\\\">\\n      <mat-card class=\\\"mb-4\\\">\\n        <mat-card-header>\\n          <mat-card-title>{{ form.title }}</mat-card-title>\\n          <mat-card-subtitle>\\n            Submitted by {{ submission.submittedBy }} on {{ formatDate(submission.submittedDate) }}\\n          </mat-card-subtitle>\\n        </mat-card-header>\\n      </mat-card>\\n\\n      <div *ngFor=\\\"let section of form.sections\\\" class=\\\"mb-4\\\">\\n        <mat-card>\\n          <mat-card-header>\\n            <mat-card-title>{{ section.title }}</mat-card-title>\\n            <mat-card-subtitle *ngIf=\\\"section.description\\\">{{ section.description }}</mat-card-subtitle>\\n          </mat-card-header>\\n          <mat-card-content>\\n            <table class=\\\"table\\\">\\n              <tbody>\\n                <ng-container *ngFor=\\\"let control of section.controls\\\">\\n                  <tr *ngIf=\\\"control.type !== 'Note'\\\">\\n                    <td width=\\\"30%\\\"><strong>{{ control.label }}</strong></td>\\n                    <td>\\n                      <ng-container *ngFor=\\\"let response of submission.responses\\\">\\n                        <ng-container *ngIf=\\\"response.controlId === control.id\\\">\\n                          <div [innerHTML]=\\\"getDisplayValue(response)\\\"></div>\\n                        </ng-container>\\n                      </ng-container>\\n                    </td>\\n                  </tr>\\n                </ng-container>\\n              </tbody>\\n            </table>\\n          </mat-card-content>\\n        </mat-card>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\",\n      dependencies: [{\n        kind: \"directive\",\n        type: i4.NgForOf,\n        selector: \"[ngFor][ngForOf]\",\n        inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"]\n      }, {\n        kind: \"directive\",\n        type: i4.NgIf,\n        selector: \"[ngIf]\",\n        inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"]\n      }, {\n        kind: \"component\",\n        type: i5.MatButton,\n        selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \",\n        exportAs: [\"matButton\"]\n      }, {\n        kind: \"component\",\n        type: i5.MatIconButton,\n        selector: \"button[mat-icon-button]\",\n        exportAs: [\"matButton\"]\n      }, {\n        kind: \"component\",\n        type: i6.MatCard,\n        selector: \"mat-card\",\n        inputs: [\"appearance\"],\n        exportAs: [\"matCard\"]\n      }, {\n        kind: \"directive\",\n        type: i6.MatCardContent,\n        selector: \"mat-card-content\"\n      }, {\n        kind: \"component\",\n        type: i6.MatCardHeader,\n        selector: \"mat-card-header\"\n      }, {\n        kind: \"directive\",\n        type: i6.MatCardSubtitle,\n        selector: \"mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]\"\n      }, {\n        kind: \"directive\",\n        type: i6.MatCardTitle,\n        selector: \"mat-card-title, [mat-card-title], [matCardTitle]\"\n      }, {\n        kind: \"component\",\n        type: i7.MatIcon,\n        selector: \"mat-icon\",\n        inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"],\n        exportAs: [\"matIcon\"]\n      }, {\n        kind: \"component\",\n        type: i8.MatProgressSpinner,\n        selector: \"mat-progress-spinner, mat-spinner\",\n        inputs: [\"color\", \"mode\", \"value\", \"diameter\", \"strokeWidth\"],\n        exportAs: [\"matProgressSpinner\"]\n      }, {\n        kind: \"component\",\n        type: i9.MatTable,\n        selector: \"mat-table, table[mat-table]\",\n        exportAs: [\"matTable\"]\n      }, {\n        kind: \"directive\",\n        type: i9.MatHeaderCellDef,\n        selector: \"[matHeaderCellDef]\"\n      }, {\n        kind: \"directive\",\n        type: i9.MatHeaderRowDef,\n        selector: \"[matHeaderRowDef]\",\n        inputs: [\"matHeaderRowDef\", \"matHeaderRowDefSticky\"]\n      }, {\n        kind: \"directive\",\n        type: i9.MatColumnDef,\n        selector: \"[matColumnDef]\",\n        inputs: [\"matColumnDef\"]\n      }, {\n        kind: \"directive\",\n        type: i9.MatCellDef,\n        selector: \"[matCellDef]\"\n      }, {\n        kind: \"directive\",\n        type: i9.MatRowDef,\n        selector: \"[matRowDef]\",\n        inputs: [\"matRowDefColumns\", \"matRowDefWhen\"]\n      }, {\n        kind: \"directive\",\n        type: i9.MatHeaderCell,\n        selector: \"mat-header-cell, th[mat-header-cell]\"\n      }, {\n        kind: \"directive\",\n        type: i9.MatCell,\n        selector: \"mat-cell, td[mat-cell]\"\n      }, {\n        kind: \"component\",\n        type: i9.MatHeaderRow,\n        selector: \"mat-header-row, tr[mat-header-row]\",\n        exportAs: [\"matHeaderRow\"]\n      }, {\n        kind: \"component\",\n        type: i9.MatRow,\n        selector: \"mat-row, tr[mat-row]\",\n        exportAs: [\"matRow\"]\n      }]\n    });\n  }\n  return FormSubmissionComponent;\n})();\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.5\",\n  ngImport: i0,\n  type: FormSubmissionComponent,\n  decorators: [{\n    type: Component,\n    args: [{\n      selector: 'app-form-submission',\n      standalone: false,\n      template: \"<div class=\\\"container mt-4\\\">\\n  <div *ngIf=\\\"!submissionId\\\">\\n    <div class=\\\"d-flex justify-content-between align-items-center mb-4\\\">\\n      <h1>Form Submissions</h1>\\n    </div>\\n\\n    <div *ngIf=\\\"loading\\\" class=\\\"d-flex justify-content-center\\\">\\n      <mat-spinner diameter=\\\"40\\\"></mat-spinner>\\n    </div>\\n\\n    <div *ngIf=\\\"!loading\\\">\\n      <mat-card>\\n        <mat-card-content>\\n          <table mat-table [dataSource]=\\\"submissions\\\" class=\\\"w-100\\\">\\n            <!-- ID Column -->\\n            <ng-container matColumnDef=\\\"id\\\">\\n              <th mat-header-cell *matHeaderCellDef>ID</th>\\n              <td mat-cell *matCellDef=\\\"let submission\\\">{{ submission.id }}</td>\\n            </ng-container>\\n\\n            <!-- Form Title Column -->\\n            <ng-container matColumnDef=\\\"formTitle\\\">\\n              <th mat-header-cell *matHeaderCellDef>Form</th>\\n              <td mat-cell *matCellDef=\\\"let submission\\\">\\n                <!-- In a real application, we would fetch the form title -->\\n                Form #{{ submission.formId }}\\n              </td>\\n            </ng-container>\\n\\n            <!-- Submitted By Column -->\\n            <ng-container matColumnDef=\\\"submittedBy\\\">\\n              <th mat-header-cell *matHeaderCellDef>Submitted By</th>\\n              <td mat-cell *matCellDef=\\\"let submission\\\">{{ submission.submittedBy }}</td>\\n            </ng-container>\\n\\n            <!-- Submitted Date Column -->\\n            <ng-container matColumnDef=\\\"submittedDate\\\">\\n              <th mat-header-cell *matHeaderCellDef>Submitted Date</th>\\n              <td mat-cell *matCellDef=\\\"let submission\\\">{{ formatDate(submission.submittedDate) }}</td>\\n            </ng-container>\\n\\n            <!-- Actions Column -->\\n            <ng-container matColumnDef=\\\"actions\\\">\\n              <th mat-header-cell *matHeaderCellDef>Actions</th>\\n              <td mat-cell *matCellDef=\\\"let submission\\\">\\n                <button mat-icon-button color=\\\"primary\\\" (click)=\\\"viewSubmission(submission.id)\\\">\\n                  <mat-icon>visibility</mat-icon>\\n                </button>\\n              </td>\\n            </ng-container>\\n\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n          </table>\\n\\n          <div *ngIf=\\\"submissions.length === 0\\\" class=\\\"p-4 text-center\\\">\\n            <p class=\\\"text-muted\\\">No submissions found</p>\\n          </div>\\n        </mat-card-content>\\n      </mat-card>\\n    </div>\\n  </div>\\n\\n  <div *ngIf=\\\"submissionId\\\">\\n    <div class=\\\"d-flex justify-content-between align-items-center mb-4\\\">\\n      <h1>Submission Details</h1>\\n      <button mat-raised-button color=\\\"basic\\\" (click)=\\\"backToList()\\\">\\n        <mat-icon>arrow_back</mat-icon> Back to List\\n      </button>\\n    </div>\\n\\n    <div *ngIf=\\\"loading\\\" class=\\\"d-flex justify-content-center\\\">\\n      <mat-spinner diameter=\\\"40\\\"></mat-spinner>\\n    </div>\\n\\n    <div *ngIf=\\\"!loading && submission && form\\\">\\n      <mat-card class=\\\"mb-4\\\">\\n        <mat-card-header>\\n          <mat-card-title>{{ form.title }}</mat-card-title>\\n          <mat-card-subtitle>\\n            Submitted by {{ submission.submittedBy }} on {{ formatDate(submission.submittedDate) }}\\n          </mat-card-subtitle>\\n        </mat-card-header>\\n      </mat-card>\\n\\n      <div *ngFor=\\\"let section of form.sections\\\" class=\\\"mb-4\\\">\\n        <mat-card>\\n          <mat-card-header>\\n            <mat-card-title>{{ section.title }}</mat-card-title>\\n            <mat-card-subtitle *ngIf=\\\"section.description\\\">{{ section.description }}</mat-card-subtitle>\\n          </mat-card-header>\\n          <mat-card-content>\\n            <table class=\\\"table\\\">\\n              <tbody>\\n                <ng-container *ngFor=\\\"let control of section.controls\\\">\\n                  <tr *ngIf=\\\"control.type !== 'Note'\\\">\\n                    <td width=\\\"30%\\\"><strong>{{ control.label }}</strong></td>\\n                    <td>\\n                      <ng-container *ngFor=\\\"let response of submission.responses\\\">\\n                        <ng-container *ngIf=\\\"response.controlId === control.id\\\">\\n                          <div [innerHTML]=\\\"getDisplayValue(response)\\\"></div>\\n                        </ng-container>\\n                      </ng-container>\\n                    </td>\\n                  </tr>\\n                </ng-container>\\n              </tbody>\\n            </table>\\n          </mat-card-content>\\n        </mat-card>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"\n    }]\n  }],\n  ctorParameters: () => [{\n    type: i1.ActivatedRoute\n  }, {\n    type: i1.Router\n  }, {\n    type: i2.FormService\n  }, {\n    type: i3.MatSnackBar\n  }]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}