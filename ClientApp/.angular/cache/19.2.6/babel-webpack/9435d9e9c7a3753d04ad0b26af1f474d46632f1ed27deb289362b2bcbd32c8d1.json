{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { ControlConfigComponent } from './control-config/control-config.component';\nlet FormBuilderComponent = class FormBuilderComponent {\n  route;\n  router;\n  fb;\n  formService;\n  controlService;\n  dialog;\n  snackBar;\n  formId = null;\n  form = null;\n  formGroup;\n  loading = false;\n  availableControls = [{\n    type: 'Text',\n    label: 'Text Field',\n    icon: 'text_fields'\n  }, {\n    type: 'Textarea',\n    label: 'Text Area',\n    icon: 'notes'\n  }, {\n    type: 'RadioGroup',\n    label: 'Radio Group',\n    icon: 'radio_button_checked'\n  }, {\n    type: 'CheckboxGroup',\n    label: 'Checkbox Group',\n    icon: 'check_box'\n  }, {\n    type: 'Dropdown',\n    label: 'Dropdown',\n    icon: 'arrow_drop_down_circle'\n  }, {\n    type: 'FileUpload',\n    label: 'File Upload',\n    icon: 'cloud_upload'\n  }, {\n    type: 'Signature',\n    label: 'Signature',\n    icon: 'draw'\n  }, {\n    type: 'LocationPicker',\n    label: 'Location Picker',\n    icon: 'location_on'\n  }, {\n    type: 'Note',\n    label: 'Note',\n    icon: 'info'\n  }];\n  constructor(route, router, fb, formService, controlService, dialog, snackBar) {\n    this.route = route;\n    this.router = router;\n    this.fb = fb;\n    this.formService = formService;\n    this.controlService = controlService;\n    this.dialog = dialog;\n    this.snackBar = snackBar;\n    this.formGroup = this.fb.group({\n      title: ['', Validators.required],\n      description: ['']\n    });\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      const idParam = params.get('id');\n      if (idParam) {\n        this.formId = +idParam;\n        this.loadForm(this.formId);\n      } else {\n        this.initNewForm();\n      }\n    });\n  }\n  loadForm(id) {\n    this.loading = true;\n    this.formService.getForm(id).subscribe({\n      next: form => {\n        this.form = form;\n        this.formGroup.patchValue({\n          title: form.title,\n          description: form.description\n        });\n        this.loading = false;\n      },\n      error: err => {\n        this.snackBar.open('Error loading form: ' + err.message, 'Close', {\n          duration: 3000\n        });\n        this.loading = false;\n      }\n    });\n  }\n  initNewForm() {\n    this.form = {\n      id: 0,\n      title: '',\n      description: '',\n      createdBy: 'current-user',\n      // In a real app, get from auth service\n      createdDate: new Date(),\n      modifiedDate: new Date(),\n      isPublished: false,\n      sections: [{\n        id: 0,\n        formId: 0,\n        title: 'Section 1',\n        description: '',\n        orderIndex: 0,\n        controls: []\n      }]\n    };\n  }\n  saveForm() {\n    if (this.formGroup.invalid) {\n      this.snackBar.open('Please fill in all required fields', 'Close', {\n        duration: 3000\n      });\n      return;\n    }\n    const formData = {\n      ...this.form,\n      title: this.formGroup.value.title,\n      description: this.formGroup.value.description,\n      modifiedDate: new Date()\n    };\n    this.loading = true;\n    if (this.formId) {\n      this.formService.updateForm(formData).subscribe({\n        next: response => {\n          this.form = response;\n          this.snackBar.open('Form updated successfully', 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error updating form: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    } else {\n      this.formService.createForm(formData).subscribe({\n        next: response => {\n          this.form = response;\n          this.formId = response.id;\n          this.router.navigate(['/forms', this.formId]);\n          this.snackBar.open('Form created successfully', 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        },\n        error: err => {\n          this.snackBar.open('Error creating form: ' + err.message, 'Close', {\n            duration: 3000\n          });\n          this.loading = false;\n        }\n      });\n    }\n  }\n  publishForm() {\n    if (!this.formId) {\n      this.snackBar.open('Please save the form before publishing', 'Close', {\n        duration: 3000\n      });\n      return;\n    }\n    this.loading = true;\n    this.formService.publishForm(this.formId).subscribe({\n      next: response => {\n        this.form = response;\n        this.snackBar.open('Form published successfully', 'Close', {\n          duration: 3000\n        });\n        this.loading = false;\n      },\n      error: err => {\n        this.snackBar.open('Error publishing form: ' + err.message, 'Close', {\n          duration: 3000\n        });\n        this.loading = false;\n      }\n    });\n  }\n  addSection() {\n    if (!this.form) return;\n    const newSection = {\n      id: 0,\n      // Will be set by the backend\n      formId: this.form.id,\n      title: `Section ${this.form.sections.length + 1}`,\n      description: '',\n      orderIndex: this.form.sections.length,\n      controls: []\n    };\n    this.form.sections.push(newSection);\n  }\n  deleteSection(index) {\n    if (!this.form) return;\n    this.form.sections.splice(index, 1);\n    // Update the orderIndex for the remaining sections\n    this.form.sections.forEach((section, idx) => {\n      section.orderIndex = idx;\n    });\n  }\n  dropControl(event, sectionIndex) {\n    if (!this.form) return;\n    if (event.previousContainer === event.container) {\n      // Reordering within the same section\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n      // Update the orderIndex for the controls\n      event.container.data.forEach((control, idx) => {\n        control.orderIndex = idx;\n      });\n      if (this.formId) {\n        this.controlService.updateControlOrder(this.form.sections[sectionIndex].id, event.container.data.map(control => control.id)).subscribe();\n      }\n    } else {\n      // Adding a new control from the available controls panel\n      const controlType = this.availableControls[event.previousIndex].type;\n      // Open configuration dialog\n      this.openControlConfig(null, controlType, sectionIndex, event.currentIndex);\n    }\n  }\n  openControlConfig(control, type, sectionIndex, orderIndex) {\n    const dialogRef = this.dialog.open(ControlConfigComponent, {\n      width: '600px',\n      data: {\n        control,\n        type,\n        sectionId: this.form?.sections[sectionIndex].id,\n        availableControls: this.form?.sections.flatMap(s => s.controls) || []\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (control) {\n          // Update existing control\n          const sectionControls = this.form?.sections[sectionIndex].controls || [];\n          const controlIndex = sectionControls.findIndex(c => c.id === control.id);\n          if (controlIndex !== -1 && this.form) {\n            this.form.sections[sectionIndex].controls[controlIndex] = result;\n          }\n        } else {\n          // Add new control\n          const newControl = {\n            ...result,\n            orderIndex,\n            sectionId: this.form?.sections[sectionIndex].id || 0\n          };\n          if (this.form) {\n            this.form.sections[sectionIndex].controls.splice(orderIndex, 0, newControl);\n            // Update the orderIndex for the controls\n            this.form.sections[sectionIndex].controls.forEach((control, idx) => {\n              control.orderIndex = idx;\n            });\n          }\n        }\n      }\n    });\n  }\n  editControl(control, sectionIndex) {\n    this.openControlConfig(control, null, sectionIndex, control.orderIndex);\n  }\n  deleteControl(controlIndex, sectionIndex) {\n    if (!this.form) return;\n    const control = this.form.sections[sectionIndex].controls[controlIndex];\n    if (control.id && this.formId) {\n      this.controlService.deleteControl(control.id).subscribe({\n        next: () => {\n          this.form?.sections[sectionIndex].controls.splice(controlIndex, 1);\n          // Update the orderIndex for the remaining controls\n          this.form?.sections[sectionIndex].controls.forEach((c, idx) => {\n            c.orderIndex = idx;\n          });\n          this.snackBar.open('Control deleted successfully', 'Close', {\n            duration: 3000\n          });\n        },\n        error: err => {\n          this.snackBar.open('Error deleting control: ' + err.message, 'Close', {\n            duration: 3000\n          });\n        }\n      });\n    } else {\n      this.form.sections[sectionIndex].controls.splice(controlIndex, 1);\n      // Update the orderIndex for the remaining controls\n      this.form.sections[sectionIndex].controls.forEach((c, idx) => {\n        c.orderIndex = idx;\n      });\n    }\n  }\n  previewForm() {\n    if (this.formId) {\n      this.router.navigate(['/forms', this.formId, 'preview']);\n    } else {\n      this.snackBar.open('Please save the form before previewing', 'Close', {\n        duration: 3000\n      });\n    }\n  }\n};\nFormBuilderComponent = __decorate([Component({\n  selector: 'app-form-builder',\n  templateUrl: './form-builder.component.html'\n})], FormBuilderComponent);\nexport { FormBuilderComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}